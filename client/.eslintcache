[{"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx":"1","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx":"2","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts":"3","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx":"4","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx":"5","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx":"6","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx":"7","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx":"8","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx":"9","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx":"10","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx":"11","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx":"12","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx":"13","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx":"14","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx":"15","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx":"16","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx":"17","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx":"18","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx":"19","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx":"20","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx":"21","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx":"22","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx":"23","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx":"24","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx":"25","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx":"26","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx":"27","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Thread.tsx":"28","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts":"29","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx":"30","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ThreadSortingBtns.tsx":"31","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LikeSection.tsx":"32"},{"size":2913,"mtime":1627588116333,"results":"33","hashOfConfig":"34"},{"size":5110,"mtime":1627536816729,"results":"35","hashOfConfig":"34"},{"size":425,"mtime":1607784182783,"results":"36","hashOfConfig":"34"},{"size":2462,"mtime":1627599978292,"results":"37","hashOfConfig":"34"},{"size":32273,"mtime":1627510340306,"results":"38","hashOfConfig":"34"},{"size":4426,"mtime":1627621962820,"results":"39","hashOfConfig":"34"},{"size":1957,"mtime":1627163448967,"results":"40","hashOfConfig":"34"},{"size":3017,"mtime":1627548883623,"results":"41","hashOfConfig":"34"},{"size":1341,"mtime":1627089325956,"results":"42","hashOfConfig":"34"},{"size":3496,"mtime":1627516941256,"results":"43","hashOfConfig":"34"},{"size":247,"mtime":1627512237368,"results":"44","hashOfConfig":"34"},{"size":4446,"mtime":1627544074243,"results":"45","hashOfConfig":"34"},{"size":327,"mtime":1627264169528,"results":"46","hashOfConfig":"34"},{"size":991,"mtime":1627334030301,"results":"47","hashOfConfig":"34"},{"size":426,"mtime":1626443446668,"results":"48","hashOfConfig":"34"},{"size":382,"mtime":1626377368932,"results":"49","hashOfConfig":"34"},{"size":1513,"mtime":1627544081272,"results":"50","hashOfConfig":"34"},{"size":718,"mtime":1627588144108,"results":"51","hashOfConfig":"34"},{"size":1661,"mtime":1627078858743,"results":"52","hashOfConfig":"34"},{"size":3700,"mtime":1627347812018,"results":"53","hashOfConfig":"34"},{"size":647,"mtime":1627079266812,"results":"54","hashOfConfig":"34"},{"size":2848,"mtime":1627078808958,"results":"55","hashOfConfig":"34"},{"size":2334,"mtime":1627536625279,"results":"56","hashOfConfig":"34"},{"size":246,"mtime":1627544267954,"results":"57","hashOfConfig":"34"},{"size":1192,"mtime":1627160280436,"results":"58","hashOfConfig":"34"},{"size":690,"mtime":1627265277928,"results":"59","hashOfConfig":"34"},{"size":736,"mtime":1627274854190,"results":"60","hashOfConfig":"34"},{"size":3549,"mtime":1627516790625,"results":"61","hashOfConfig":"34"},{"size":231,"mtime":1607976985837,"results":"62","hashOfConfig":"34"},{"size":4088,"mtime":1627078789007,"results":"63","hashOfConfig":"34"},{"size":1251,"mtime":1627512671435,"results":"64","hashOfConfig":"34"},{"size":1919,"mtime":1627621815653,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"11skg4y",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx",[],["145","146"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts",[],["147","148"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx",["149","150"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx",["151","152","153"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setAccessToken } from \"./accessToken\";\n\nimport { Header2 } from \"./components/Header2\";\nimport { Footer } from \"./components/Footer\";\nimport { Skeleton } from \"./smallComps/Skeleton\";\n\nimport { useIsUserLoggedInQuery } from \"./generated/graphql\";\nimport { BaseRouter } from \"./routes\";\nimport { Container, Spinner } from \"@chakra-ui/react\";\n\nimport {FastBigSpinner} from \"./smallComps/Spinners\"\n\nfunction App() {\n  const [appLoading, setAppLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/refresh_token\", {\n      credentials: \"include\",\n      method: \"POST\",\n    }).then(async (x) => {\n      const resposne = await x.json();\n      setAccessToken(resposne.accessToken);\n      setAppLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {appLoading ? (\n        <Container marginLeft=\"auto\" marginRight=\"auto\" marginTop=\"10rem\">\n          <FastBigSpinner />\n        </Container>\n      ) : (\n        <>\n          <BrowserRouter>\n            {/* <Header /> */}\n            <Header2 />\n            <Skeleton>\n              <BaseRouter />\n            </Skeleton>\n            <Footer />\n          </BrowserRouter>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx",["154","155"],"import \"./index.css\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {theme} from \"./theme\"\n\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  createHttpLink,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\n\n// import { onError } from '@apollo/client/link/error';\n\n// const authMiddlewareLink = new ApolloLink((operation, forward) => {\n//   const accessToken = getAccessToken()\n//   operation.setContext({\n//     headers: {\n//       authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//   return forward(operation);\n// });\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\",\n  credentials: \"include\",\n  useGETForQueries: true,\n});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `Bearer ${accessToken}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) {\n      return true;\n    }\n    try {\n      const tokenDecoded: any = jwtDecode(token);\n      const expDate: number = tokenDecoded.exp;\n      if (Date.now() >= expDate * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(\"http://localhost:8000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nexport const client = new ApolloClient({\n  cache,\n\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    tokenRefreshLink,\n    requestLink,\n    httpLink,\n  ]),\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx",["156","157"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Flex,\r\n  Button,\r\n  useColorMode,\r\n  useDisclosure,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useIsUserLoggedInQuery,\r\n  useLogoutMutation,\r\n} from \"../generated/graphql\";\r\n\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { AiFillHome, AiOutlineUser } from \"react-icons/ai\";\r\nimport { BiBookContent } from \"react-icons/bi\";\r\n\r\nimport { ModalComponent } from \"../components/Modal\";\r\nimport { LinkBox } from \"../smallComps/LinkBox\";\r\nimport { SmallSpinner } from \"../smallComps/Spinners\";\r\n\r\ninterface ProfileButtonProps {\r\n  isUserLogged: boolean;\r\n}\r\n\r\nconst ProfileButton: React.FC<ProfileButtonProps> = ({ isUserLogged }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const {  onClose } = useDisclosure({\r\n    onClose: () => setShowModal(false),\r\n  });\r\n\r\n\r\n  const router = useHistory();\r\n  const handleProfileClick = () => {\r\n    if (isUserLogged === true) {\r\n      router.push(\"/profile\");\r\n    } else {\r\n      setShowModal(true);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <ModalComponent showModal={showModal} onClose={onClose} />\r\n      <Button\r\n        onClick={() => handleProfileClick()}\r\n        height={[\"30%\", \"30%\", \"50%\", \"50%\"]}\r\n        fontSize={[\"sm\", \"sm\", \"medium\", \"medium\"]}\r\n        fontWeight=\"bold\"\r\n        bgColor=\"green.400\"\r\n        borderRadius=\"-10px\"\r\n        _hover={{\r\n          bgColor: \"green.500\",\r\n        }}\r\n        mx=\"0.4rem\"\r\n      >\r\n        <AiOutlineUser width=\"40px\" />\r\n\r\n        <span style={{ marginLeft: \"4px\" }}>profile</span>\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface LogoutButtonProps extends ProfileButtonProps {}\r\nconst LogoutButton: React.FC<LogoutButtonProps> = ({ isUserLogged }) => {\r\n  const [logoutUser] = useLogoutMutation();\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    let isMounted = false;\r\n    return () => {\r\n      console.log(\"unmounting\");\r\n\r\n      if (isMounted === false) {\r\n        isMounted = true;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    if (isUserLogged) {\r\n      setAccessToken(\"\");\r\n      await logoutUser({\r\n        update: async (cache, _) => {\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: false,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      onClick={() => handleLogout()}\r\n      height={[\"30%\", \"30%\", \"50%\", \"50%\"]}\r\n      fontSize={[\"sm\", \"sm\", \"medium\", \"medium\"]}\r\n      fontWeight=\"bold\"\r\n      bgColor=\"green.400\"\r\n      borderRadius=\"-10px\"\r\n      _hover={{\r\n        bgColor: \"green.500\",\r\n      }}\r\n      mx=\"0.4rem\"\r\n    >\r\n      Logout\r\n    </Button>\r\n  );\r\n};\r\n\r\ninterface Header2Props {}\r\nexport const Header2: React.FC<Header2Props> = ({}) => {\r\n  // const { data, loading, error } = useMeQuery();\r\n  const loginState = useIsUserLoggedInQuery({\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      bgColor=\"green.300\"\r\n      fontSize={[\"sm\", \"md\", \"large\", \"xl\"]}\r\n      fontWeight=\"bold\"\r\n      color=\"white\"\r\n      width=\"100%\"\r\n      height={[\"70px\", \"70px\", \"100px\", \"100px\"]}\r\n    >\r\n      <Flex\r\n        ml={{\r\n          small: \"0.1rem\",\r\n          base: \"0.5rem\",\r\n        }}\r\n        position=\"absolute\"\r\n        left={{ base: \"1px\", md: \"1rem\" }}\r\n      >\r\n        <LinkBox route=\"Home\" icon={<AiFillHome width=\"20px\" />} />\r\n        <LinkBox route=\"topics\" icon={<BiBookContent width=\"20px\" />} />\r\n      </Flex>\r\n\r\n      <Flex\r\n        position=\"absolute\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        height=\"100px\"\r\n        right={{ base: \"1px\", md: \"1rem\" }}\r\n      >\r\n        {loginState && loginState.loading && (\r\n          <Box marginLeft=\"5px\">\r\n            <SmallSpinner />\r\n          </Box>\r\n        )}\r\n        {loginState && !loginState.data?.isUserLoggedIn ? (\r\n          <ProfileButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n        ) : (\r\n          <>\r\n            <ProfileButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n            <LogoutButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n          </>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx",["158"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalOverlay,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { LoginFrom } from \"./LoginFrom\";\r\nimport { RegisterFrom } from \"./RegisterForm\";\r\nimport { useIsUserLoggedInQuery } from \"../generated/graphql\";\r\n\r\ninterface ModalComponentProps {\r\n  showModal: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const ModalComponent: React.FC<ModalComponentProps> = ({\r\n  showModal,\r\n  onClose,\r\n}) => {\r\n  const isUserLoggedIn = useIsUserLoggedInQuery({fetchPolicy: \"network-only\"})\r\n  const [displayedForm, setDisplayedForm] = useState(\"loginForm\");\r\n  return (\r\n    <>\r\n      <Modal isOpen={showModal} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent marginTop=\"8rem\">\r\n          <ModalCloseButton />\r\n\r\n          <ModalBody margin=\"1rem\">\r\n            {displayedForm === \"loginForm\" ? <LoginFrom /> : <RegisterFrom />}\r\n          </ModalBody>\r\n          <Button\r\n            bgColor=\"green.200\"\r\n            textAlign=\"center\"\r\n            onClick={() => {\r\n              if (displayedForm === \"loginForm\") {\r\n                setDisplayedForm(\"signupForm\");\r\n              } else {\r\n                setDisplayedForm(\"loginForm\");\r\n              }\r\n            }}\r\n          >\r\n            {displayedForm === \"loginForm\"\r\n              ? \"create an account\"\r\n              : \"login to your acccount\"}\r\n          </Button>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx",["159"],"import React, { useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({}) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [register] = useRegisterMutation();\r\n\r\n  const registerNewUser = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    \r\n    if (!username || !email || !password) {\r\n      return console.log(\"enter some data\");\r\n    }\r\n    register({\r\n      variables: {\r\n        username,\r\n        email,\r\n        password,\r\n      },\r\n    }).then((response) => {\r\n      console.log(response);\r\n    });\r\n    setEmail(\"\");\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"signup-form\">\r\n        <label htmlFor=\"username\">username: </label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">password: </label>\r\n        <input\r\n          id=\"password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">email: </label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <button onClick={(e) => registerNewUser(e)}>Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx",["160","161"],"import React, { useState } from \"react\";\r\nimport { useListThreadsQuery } from \"../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Box, Divider, Flex } from \"@chakra-ui/react\";\r\n\r\nimport { QuestionForm } from \"../smallComps/QuestionForm\";\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\nimport { BiBarChartAlt } from \"react-icons/bi\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { Skeleton } from \"../smallComps/Skeleton\"\r\nimport { HeaderComp } from \"../smallComps/HeaderComp\";\r\n\r\nexport const Home: React.FC<RouteComponentProps> = ({ history, location }) => {\r\n  const [threadsHeader, setThreadsHeader] = useState(\"Most trendy threads\");\r\n  const { data, loading, refetch } = useListThreadsQuery({\r\n    fetchPolicy: \"cache-and-network\",\r\n    variables: {\r\n      sortBy: threadsHeader.split(\" \")[1],\r\n    },\r\n  });\r\n\r\n  let ThreadsComp: any = null;\r\n  if (loading) {\r\n    ThreadsComp = <FastBigSpinner />;\r\n  } else if (data) {\r\n    ThreadsComp = (\r\n      <>\r\n        {data.listThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              threadId={thread.id}\r\n              question={thread.question}\r\n              username={thread.threadCreator}\r\n              createdAt={thread.createdAt}\r\n              repliesCount={thread.replies?.length}\r\n              specializtion={thread.specialization}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    < >\r\n      <HeaderComp threadsHeader={threadsHeader}/>\r\n      \r\n      <Flex marginTop=\"1rem\">\r\n        <Flex\r\n          // justifyContent=\"center\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n          flex=\"4\"\r\n          shadow=\"base\"\r\n          p={[\"5px\", \"5px\", \"1rem\", \"1rem\"]}\r\n        >\r\n          {ThreadsComp}\r\n        </Flex>\r\n\r\n        <Flex\r\n          flex=\"1\"\r\n          p=\"0.5rem\"\r\n          flexDirection=\"column\"\r\n          marginLeft=\"5px\"\r\n        >\r\n          <Box p={[\"0.3rem\", \"0.4rem\", \"0.8rem\", \"0.8rem\"]} shadow=\"base\" marginBottom=\"1rem\">\r\n            <Box\r\n              onClick={() => setThreadsHeader(\"Most trendy threads\")}\r\n              textAlign=\"center\"\r\n              p={[\"0.2rem\", \"0.4rem\", \"0.8rem\", \"0.8rem\"]}\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              <Flex justify=\"center\" align=\"center\" fontSize={{base: \"0.7rem\", md: \"1.2rem\"}}>\r\n                <BiBarChartAlt style={{ marginRight: \"5px\" }} />\r\n                <span>most answers</span>\r\n              </Flex>\r\n            </Box>\r\n\r\n            <Box\r\n              onClick={() => setThreadsHeader(\"Most recent threads\")}\r\n              textAlign=\"center\"\r\n              p={[\"0.2rem\", \"0.2rem\", \"0.8rem\", \"0.8rem\"]}\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              <Flex justify=\"center\" align=\"center\" fontSize={{base: \"0.7rem\", md: \"1.2rem\"}}>\r\n                <FiClock  style={{ marginRight: \"5px\" }} />\r\n                <span>most recent</span>\r\n              </Flex>\r\n            </Box>\r\n          </Box>\r\n\r\n          <QuestionForm refetch={refetch} />\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx",["162","163","164","165","166","167","168","169","170","171","172","173","174"],"import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { setAccessToken } from '../accessToken'\r\nimport { Message } from '../components/Message'\r\nimport { IsUserLoggedInDocument, IsUserLoggedInQuery, MeDocument, MeQuery, useIsUserLoggedInQuery, useLoginMutation } from '../generated/graphql'\r\nimport { ApolloError } from \"@apollo/client/errors\"\r\n\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showMessage, setShowMessage] = useState({\r\n        show: false,\r\n        value: \"\"\r\n    })\r\n    const [login, { data, client }] = useLoginMutation()\r\n\r\n    const loginUser = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault()\r\n        try {\r\n\r\n            const response = await login({\r\n                variables: {\r\n                    username,\r\n                    password\r\n                },\r\n                update: (cache, { data }) => {\r\n                    if (!data) {\r\n                        return null;\r\n                    }\r\n                    // cache.writeQuery<MeQuery>({\r\n                    //     query: MeDocument,\r\n                    //     data: {\r\n                    //         me: data.loginUser?.user\r\n                    //     }\r\n                    // })\r\n                    // cache.writeQuery<IsUserLoggedInQuery>({\r\n                    //     query: IsUserLoggedInDocument,\r\n                    //     data: {\r\n                    //         isUserLoggedIn: true\r\n                    //     }\r\n                    // })\r\n\r\n                },\r\n            })\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.loginUser?.accessToken!)\r\n                history.push(\"/\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch (error) {\r\n            setShowMessage({ show: true, value: error.message })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"login-form\">\r\n                {showMessage.show && (\r\n                    <Message message={showMessage.value} />\r\n                )}\r\n                <label htmlFor=\"username\">username: </label>\r\n                <input id=\"username\" type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <label htmlFor=\"password\">password: </label>\r\n                <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                <button onClick={e => loginUser(e)}>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx",["175","176","177"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  VStack,\r\n  Button,\r\n  Center,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useLoginMutation,\r\n} from \"../generated/graphql\";\r\nimport { useHistory,} from \"react-router-dom\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nexport const LoginFrom = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showMessage, setShowMessage] = useState({\r\n    show: false,\r\n    value: \"\",\r\n  });\r\n  const [login] = useLoginMutation();\r\n  const history = useHistory();\r\n  const submitLoginForm = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await login({\r\n        variables: {\r\n          username,\r\n          password,\r\n        },\r\n        update: (cache, { data }) => {\r\n          if (!data) {\r\n            return null;\r\n          }\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: true,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      if (response && response.data) {\r\n        setAccessToken(response.data.loginUser?.accessToken!);\r\n        history.push(\"/\");\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n      }\r\n    } catch (error) {\r\n      setShowMessage({ show: true, value: error.message });\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Container padding=\"0.4rem\" color=\"green.400\">\r\n      <form onSubmit={(e) => submitLoginForm(e)}>\r\n        <FormControl id=\"username\" isRequired my=\"5px\">\r\n          <FormLabel>Username</FormLabel>\r\n          <Input\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"password\" isRequired my=\"5px\">\r\n          <FormLabel>Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <Center>\r\n          <Button my=\"10px\" p=\"10px\" type=\"submit\">\r\n            login\r\n          </Button>\r\n        </Center>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx",["178","179","180","181","182"],"import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  useDisclosure,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { QuestionForm } from \"../smallComps/QuestionForm\"\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { ListUserThreadsQuery } from \"../generated/graphql\";\r\n\r\ninterface ProfileModalProps {\r\n  showModal: boolean;\r\n  onClose: () => void;\r\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>\r\n  refetchProfileThreads?: () => Promise<ApolloQueryResult<ListUserThreadsQuery>>\r\n}\r\n\r\nexport const ProfileModal: React.FC<ProfileModalProps> = ({\r\n  onClose,\r\n  showModal,\r\n  setShowModal,\r\n  refetchProfileThreads\r\n}) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={showModal} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent marginTop=\"8rem\">\r\n          <ModalCloseButton />\r\n\r\n          <ModalBody margin=\"1rem\">\r\n            <QuestionForm refetchProfileThreads={refetchProfileThreads} setShowModal={setShowModal} clickedFromProfilePage={true} />\r\n          </ModalBody>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n",["183","184"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Thread.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts",["185"],"import jwtDecode from \"jwt-decode\"\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(\"accessToken\")\r\n}\r\n\r\nexport const setAccessToken = (token: string) => {\r\n    localStorage.setItem(\"accessToken\", token)\r\n}",["186","187"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx",["188"],"import React, { useState, useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Container,\r\n  Button,\r\n  Center,\r\n  Switch,\r\n  Select,\r\n} from \"@chakra-ui/react\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\nimport { topicsQuery } from \"../pages/Topics\";\r\n\r\ninterface RegisterFromProps {}\r\n\r\nexport const RegisterFrom: React.FC<RegisterFromProps> = () => {\r\n  const { data } = useQuery(topicsQuery);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [specOptions, setSpecOptions] = useState({\r\n    showField: false,\r\n    fieldValue: \"\",\r\n  });\r\n\r\n  const [register] = useRegisterMutation({});\r\n  const submitRegisterForm = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (!username || !email || !password) {\r\n      return console.log(\"enter some data\");\r\n    }\r\n    const isUserSpec = specOptions.showField!;\r\n    const spec = specOptions.fieldValue!;\r\n    register({\r\n      variables: {\r\n        username,\r\n        email,\r\n        password,\r\n        isSpec: isUserSpec,\r\n        spec,\r\n      },\r\n    }).then((response) => {\r\n      console.log(response);\r\n    });\r\n    setEmail(\"\");\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n  return (\r\n    <Container padding=\"0.4rem\" color=\"green.600\">\r\n      <form onSubmit={(e) => submitRegisterForm(e)}>\r\n        <FormControl id=\"username\" isRequired my=\"5px\" mx=\"2px\">\r\n          <FormLabel>username</FormLabel>\r\n          <Input\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"email\" isRequired my=\"5px\">\r\n          <FormLabel>email</FormLabel>\r\n          <Input value={email} onChange={(e) => setEmail(e.target.value)} />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"password\" isRequired my=\"5px\">\r\n          <FormLabel>password</FormLabel>\r\n          <Input\r\n            value={password}\r\n            type=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        {specOptions.showField === true && (\r\n          <FormControl id=\"spec-value\" isRequired my=\"5px\">\r\n            <FormLabel>specialization</FormLabel>\r\n            <Select\r\n              onChange={(e) =>\r\n                setSpecOptions((value) => {\r\n                  return {\r\n                    ...value,\r\n                    fieldValue: e.target.value,\r\n                  };\r\n                })}\r\n              fontSize=\"16px\"\r\n              defaultValue={\"disabled\"}\r\n              name=\"topic\"\r\n              variant=\"flushed\"\r\n            >\r\n              <option value=\"disabled\" disabled>\r\n                choose a topic\r\n              </option>\r\n              {data.listTopics &&\r\n                data.listTopics.map((topic: string, idx: number) => (\r\n                  <option key={idx} value={topic}>\r\n                    {topic}\r\n                  </option>\r\n                ))}\r\n            </Select>\r\n            {/* <Input\r\n              value={specOptions.fieldValue}\r\n              onChange={(e) =>\r\n                setSpecOptions((value) => {\r\n                  return {\r\n                    ...value,\r\n                    fieldValue: e.target.value,\r\n                  };\r\n                })\r\n              }\r\n            /> */}\r\n          </FormControl>\r\n        )}\r\n        <FormControl display=\"flex\" alignItems=\"center\" my=\"5px\">\r\n          <FormLabel htmlFor=\"email-alerts\" mb=\"0\">\r\n            Creating a specialist account?\r\n          </FormLabel>\r\n          <Switch\r\n            onChange={(e) =>\r\n              setSpecOptions((value) => {\r\n                return { ...value, showField: !value.showField };\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <Center>\r\n          <Button my=\"10px\" p=\"10px\" type=\"submit\">\r\n            register\r\n          </Button>\r\n        </Center>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ThreadSortingBtns.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LikeSection.tsx",["189","190","191"],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"192","replacedBy":"196"},{"ruleId":"194","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":7,"column":3,"nodeType":"200","messageId":"201","endLine":7,"endColumn":25},{"ruleId":"198","severity":1,"message":"202","line":47,"column":10,"nodeType":"200","messageId":"201","endLine":47,"endColumn":24},{"ruleId":"198","severity":1,"message":"203","line":1,"column":38,"nodeType":"200","messageId":"201","endLine":1,"endColumn":44},{"ruleId":"198","severity":1,"message":"199","line":9,"column":10,"nodeType":"200","messageId":"201","endLine":9,"endColumn":32},{"ruleId":"198","severity":1,"message":"204","line":11,"column":21,"nodeType":"200","messageId":"201","endLine":11,"endColumn":28},{"ruleId":"198","severity":1,"message":"205","line":14,"column":3,"nodeType":"200","messageId":"201","endLine":14,"endColumn":6},{"ruleId":"198","severity":1,"message":"206","line":15,"column":3,"nodeType":"200","messageId":"201","endLine":15,"endColumn":17},{"ruleId":"198","severity":1,"message":"207","line":5,"column":3,"nodeType":"200","messageId":"201","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":118,"column":49,"nodeType":"210","messageId":"211","endLine":118,"endColumn":51},{"ruleId":"198","severity":1,"message":"212","line":24,"column":9,"nodeType":"200","messageId":"201","endLine":24,"endColumn":23},{"ruleId":"208","severity":1,"message":"209","line":5,"column":57,"nodeType":"210","messageId":"211","endLine":5,"endColumn":59},{"ruleId":"198","severity":1,"message":"213","line":4,"column":15,"nodeType":"200","messageId":"201","endLine":4,"endColumn":22},{"ruleId":"198","severity":1,"message":"214","line":11,"column":10,"nodeType":"200","messageId":"201","endLine":11,"endColumn":18},{"ruleId":"198","severity":1,"message":"215","line":1,"column":27,"nodeType":"200","messageId":"201","endLine":1,"endColumn":36},{"ruleId":"198","severity":1,"message":"216","line":1,"column":38,"nodeType":"200","messageId":"201","endLine":1,"endColumn":45},{"ruleId":"198","severity":1,"message":"217","line":1,"column":47,"nodeType":"200","messageId":"201","endLine":1,"endColumn":58},{"ruleId":"198","severity":1,"message":"218","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":32},{"ruleId":"198","severity":1,"message":"219","line":5,"column":34,"nodeType":"200","messageId":"201","endLine":5,"endColumn":53},{"ruleId":"198","severity":1,"message":"220","line":5,"column":55,"nodeType":"200","messageId":"201","endLine":5,"endColumn":65},{"ruleId":"198","severity":1,"message":"221","line":5,"column":67,"nodeType":"200","messageId":"201","endLine":5,"endColumn":74},{"ruleId":"198","severity":1,"message":"199","line":5,"column":76,"nodeType":"200","messageId":"201","endLine":5,"endColumn":98},{"ruleId":"198","severity":1,"message":"222","line":6,"column":10,"nodeType":"200","messageId":"201","endLine":6,"endColumn":21},{"ruleId":"198","severity":1,"message":"223","line":12,"column":12,"nodeType":"200","messageId":"201","endLine":12,"endColumn":17},{"ruleId":"198","severity":1,"message":"224","line":12,"column":19,"nodeType":"200","messageId":"201","endLine":12,"endColumn":27},{"ruleId":"198","severity":1,"message":"225","line":18,"column":21,"nodeType":"200","messageId":"201","endLine":18,"endColumn":25},{"ruleId":"198","severity":1,"message":"226","line":18,"column":27,"nodeType":"200","messageId":"201","endLine":18,"endColumn":33},{"ruleId":"198","severity":1,"message":"215","line":1,"column":27,"nodeType":"200","messageId":"201","endLine":1,"endColumn":36},{"ruleId":"198","severity":1,"message":"227","line":6,"column":3,"nodeType":"200","messageId":"201","endLine":6,"endColumn":9},{"ruleId":"198","severity":1,"message":"228","line":22,"column":10,"nodeType":"200","messageId":"201","endLine":22,"endColumn":21},{"ruleId":"198","severity":1,"message":"229","line":3,"column":3,"nodeType":"200","messageId":"201","endLine":3,"endColumn":9},{"ruleId":"198","severity":1,"message":"230","line":9,"column":3,"nodeType":"200","messageId":"201","endLine":9,"endColumn":14},{"ruleId":"198","severity":1,"message":"231","line":10,"column":3,"nodeType":"200","messageId":"201","endLine":10,"endColumn":14},{"ruleId":"198","severity":1,"message":"232","line":11,"column":3,"nodeType":"200","messageId":"201","endLine":11,"endColumn":16},{"ruleId":"198","severity":1,"message":"233","line":12,"column":3,"nodeType":"200","messageId":"201","endLine":12,"endColumn":10},{"ruleId":"192","replacedBy":"234"},{"ruleId":"194","replacedBy":"235"},{"ruleId":"198","severity":1,"message":"236","line":1,"column":8,"nodeType":"200","messageId":"201","endLine":1,"endColumn":17},{"ruleId":"192","replacedBy":"237"},{"ruleId":"194","replacedBy":"238"},{"ruleId":"198","severity":1,"message":"215","line":1,"column":27,"nodeType":"200","messageId":"201","endLine":1,"endColumn":36},{"ruleId":"198","severity":1,"message":"215","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":19},{"ruleId":"198","severity":1,"message":"199","line":6,"column":3,"nodeType":"200","messageId":"201","endLine":6,"endColumn":25},{"ruleId":"198","severity":1,"message":"239","line":21,"column":10,"nodeType":"200","messageId":"201","endLine":21,"endColumn":33},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],["240"],["241"],"@typescript-eslint/no-unused-vars","'useIsUserLoggedInQuery' is defined but never used.","Identifier","unusedVar","'userLogginData' is assigned a value but never used.","'useRef' is defined but never used.","'Spinner' is defined but never used.","'gql' is defined but never used.","'createHttpLink' is defined but never used.","'useColorMode' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'isUserLoggedIn' is assigned a value but never used.","'Divider' is defined but never used.","'Skeleton' is defined but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'data' is assigned a value but never used.","'client' is assigned a value but never used.","'VStack' is defined but never used.","'showMessage' is assigned a value but never used.","'Button' is defined but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Heading' is defined but never used.",["240"],["241"],"'jwtDecode' is defined but never used.",["240"],["241"],"'isUserLoggedInLazyQuery' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]