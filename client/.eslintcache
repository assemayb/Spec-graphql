[{"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx":"1","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx":"2","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts":"3","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx":"4","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx":"5","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx":"6","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx":"7","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx":"8","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx":"9","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx":"10","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx":"11","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx":"12","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx":"13","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx":"14","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx":"15","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx":"16","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx":"17","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx":"18","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx":"19","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx":"20","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx":"21","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx":"22","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx":"23","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx":"24","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx":"25"},{"size":3021,"mtime":1627181579465,"results":"26","hashOfConfig":"27"},{"size":3596,"mtime":1627162763214,"results":"28","hashOfConfig":"27"},{"size":425,"mtime":1607784182783,"results":"29","hashOfConfig":"27"},{"size":2736,"mtime":1627153026236,"results":"30","hashOfConfig":"27"},{"size":26085,"mtime":1627078596809,"results":"31","hashOfConfig":"27"},{"size":3878,"mtime":1627261325086,"results":"32","hashOfConfig":"27"},{"size":1957,"mtime":1627163448967,"results":"33","hashOfConfig":"27"},{"size":3086,"mtime":1627171538355,"results":"34","hashOfConfig":"27"},{"size":1341,"mtime":1627089325956,"results":"35","hashOfConfig":"27"},{"size":3470,"mtime":1626530353730,"results":"36","hashOfConfig":"27"},{"size":244,"mtime":1626435092133,"results":"37","hashOfConfig":"27"},{"size":4528,"mtime":1627261852485,"results":"38","hashOfConfig":"27"},{"size":294,"mtime":1627173074570,"results":"39","hashOfConfig":"27"},{"size":885,"mtime":1627073131241,"results":"40","hashOfConfig":"27"},{"size":426,"mtime":1626443446668,"results":"41","hashOfConfig":"27"},{"size":382,"mtime":1626377368932,"results":"42","hashOfConfig":"27"},{"size":1505,"mtime":1627261122230,"results":"43","hashOfConfig":"27"},{"size":729,"mtime":1627073282317,"results":"44","hashOfConfig":"27"},{"size":1661,"mtime":1627078858743,"results":"45","hashOfConfig":"27"},{"size":3637,"mtime":1627171742421,"results":"46","hashOfConfig":"27"},{"size":647,"mtime":1627079266812,"results":"47","hashOfConfig":"27"},{"size":2848,"mtime":1627078808958,"results":"48","hashOfConfig":"27"},{"size":2645,"mtime":1627163200416,"results":"49","hashOfConfig":"27"},{"size":246,"mtime":1625721792159,"results":"50","hashOfConfig":"27"},{"size":1192,"mtime":1627160280436,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11skg4y",{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"72"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"57"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx",["114","115"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx",["116"],"import React from \"react\";\r\n\r\nimport { Box, Heading, Badge, Tooltip } from \"@chakra-ui/react\";\r\n\r\nimport { FiUser } from \"react-icons/fi\";\r\nimport { BiDotsHorizontal } from \"react-icons/bi\";\r\nimport { ListUserThreadsQuery } from \"../generated/graphql\";\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { OptionsPopover } from \"../smallComps/OptionsPopover\";\r\nimport { InteractionsSection } from \"../smallComps/InteractionsSection\";\r\n\r\ninterface QuestionBoxProps {\r\n  threadId?: number;\r\n  username?: string;\r\n  question: string;\r\n  specializtion?: string;\r\n  createdAt?: string;\r\n  repliesCount?: number;\r\n  showThreadOptions?: boolean;\r\n  fromTopicPage?: boolean;\r\n  setShowThreadOptions?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  refetchProfileThreads?: () => Promise<\r\n    ApolloQueryResult<ListUserThreadsQuery>\r\n  >;\r\n}\r\nexport const QuestionBox: React.FC<QuestionBoxProps> = ({\r\n  threadId,\r\n  question,\r\n  username,\r\n  createdAt,\r\n  repliesCount,\r\n  specializtion,\r\n  showThreadOptions,\r\n  fromTopicPage,\r\n  setShowThreadOptions,\r\n  refetchProfileThreads,\r\n}) => {\r\n  // const currentUser = useMeQuery();\r\n\r\n  return (\r\n    <Box\r\n      pos=\"relative\"\r\n      width=\"100%\"\r\n      p={username ? \"1.2rem\" : \"14px\"}\r\n      my=\"5px\"\r\n      shadow={username ? \"md\" : \"sm\"}\r\n      bgColor=\"gray.200\"\r\n      _hover={{\r\n        bgColor: \"gray.400\",\r\n        borderRadius: \"-30px\",\r\n      }}\r\n      borderRadius=\"-20px\"\r\n      borderLeft=\"5px solid green.200\"\r\n    >\r\n      {username && (\r\n        <Heading as=\"h5\" size=\"xs\" color=\"gray.400\" display=\"flex\">\r\n          <FiUser size=\"15px\" />\r\n          <Box ml=\"4px\">{username}</Box>\r\n        </Heading>\r\n      )}\r\n      <Heading\r\n        as=\"h3\"\r\n        boxShadow=\"sm\"\r\n        size=\"md\"\r\n        my=\"5px\"\r\n        marginLeft=\"2rem\"\r\n        p=\"10px\"\r\n        pos=\"relative\"\r\n        cursor=\"pointer\"\r\n        color=\"blackAlpha.700\"\r\n        fontSize=\"xl\"\r\n        _hover={{\r\n          color: \"green.600\",\r\n        }}\r\n      >\r\n        {question}\r\n        {!fromTopicPage && (\r\n          <Badge\r\n            variant=\"subtle\"\r\n            colorScheme=\"green\"\r\n            pos=\"absolute\"\r\n            p=\"0.2rem\"\r\n            right=\"2px\"\r\n            top={username ? \"0.1rem\" : \"1.2rem\"}\r\n            fontSize=\"0.7rem\"\r\n            opacity=\"0.7\"\r\n          >\r\n            {specializtion}\r\n          </Badge>\r\n        )}\r\n      </Heading>\r\n      {!username &&(\r\n        <OptionsPopover\r\n          showThreadOptions={showThreadOptions}\r\n          setShowThreadOptions={setShowThreadOptions!}\r\n          refetch={refetchProfileThreads!}\r\n          threadId={threadId!}\r\n        >\r\n          <Box\r\n            as=\"button\"\r\n            onClick={() => {\r\n              if (setShowThreadOptions !== undefined) {\r\n                setShowThreadOptions(true);\r\n              }\r\n            }}\r\n            pos=\"absolute\"\r\n            top=\"0px\"\r\n            right=\"1px\"\r\n          >\r\n            {/* <Tooltip\r\n              label=\"thread oprtions\"\r\n              aria-label=\"thread oprtions tooltip\"\r\n            > */}\r\n              <div>\r\n                <BiDotsHorizontal color=\"gray\" size=\"1.3rem\" cursor=\"pointer\" />\r\n              </div>\r\n            {/* </Tooltip> */}\r\n          </Box>\r\n        </OptionsPopover>\r\n      )}\r\n      {username && (\r\n        <>\r\n          <InteractionsSection repliesCount={repliesCount!} />\r\n          <Heading pos=\"absolute\" right=\"20px\" color=\"gray.400\" fontSize=\"12px\">\r\n            {createdAt !== null && createdAt?.substr(0, 10)}\r\n          </Heading>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n",["117","118"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx",["119","120","121","122","123","124","125","126","127"],"import React, { useState, useEffect, FC } from \"react\";\r\nimport { useIsUserLoggedInQuery } from \"../generated/graphql\";\r\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Flex,\r\n  VStack,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Grid,\r\n  Spinner,\r\n  Skeleton,\r\n  Divider,\r\n  Center,\r\n} from \"@chakra-ui/react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\ninterface TopicBoxProps {\r\n  topic: string;\r\n}\r\nconst TopicBox: FC<TopicBoxProps> = ({ topic }) => {\r\n  const router = useHistory();\r\n  const goToTopic = () => {\r\n    router.push(`/topics/${topic}`);\r\n  };\r\n  return (\r\n    <Box\r\n      onClick={() => goToTopic()}\r\n      cursor=\"pointer\"\r\n      w=\"100%\"\r\n      h=\"100px\"\r\n      bg=\"gray.100\"\r\n      shadow=\"md\"\r\n      borderRadius=\"-10px\"\r\n      _hover={{\r\n        color: \"green.400\",\r\n        bg: \"gray.300\",\r\n        shadow: \"lg\",\r\n      }}\r\n    >\r\n      <Box\r\n        textAlign=\"center\"\r\n        p=\"0.2rem\"\r\n        fontSize={[\"10px\", \"13px\", \"18px\", \"20px\"]}\r\n        fontWeight=\"bold\"\r\n        textShadow=\"md\"\r\n        marginTop=\"5px\"\r\n      >\r\n        {topic}\r\n        <Center marginTop=\"5px\">\r\n          <img\r\n            src={topic === \"Cancer\" ? `${topic}.png` : `${topic}.svg`}\r\n            width={topic === \"Cancer\" ? \"35px\" : \"\"}\r\n            alt=\"\"\r\n          />\r\n        </Center>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const topicsQuery = gql`\r\n  query listTopics {\r\n    listTopics\r\n  }\r\n`;\r\n\r\nexport const Topics: React.FC<RouteComponentProps> = () => {\r\n  const { data } = useQuery(topicsQuery);\r\n  const [topcis, setTopics] = useState([]);\r\n  const [dummieArr] = useState(new Array(12).fill(\"\"));\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setTimeout(() => {\r\n        setTopics(data.listTopics);\r\n      }, 200);\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        marginLeft=\"1rem\"\r\n        marginTop=\"1rem\"\r\n        fontSize=\"30px\"\r\n        fontFamily=\"fantasy\"\r\n        fontWeight=\"bold\"\r\n        color=\"gray.500\"\r\n        textShadow=\"lg\"\r\n      >\r\n        Health Topics\r\n        <Divider />\r\n      </Box>\r\n\r\n      <Box p=\"2rem\" marginTop=\"2rem\" shadow=\"base\">\r\n        <Grid\r\n          templateColumns={[\r\n            \"repeat(2, 1fr)\",\r\n            \"repeat(3, 1fr)\",\r\n            \"repeat(4, 1fr)\",\r\n            \"repeat(5, 1fr)\",\r\n          ]}\r\n          gap={5}\r\n        >\r\n          <>\r\n            {topcis.length < 1\r\n              ? dummieArr.map((item, idx) => {\r\n                return <Skeleton color=\"green.100\" key={idx} height=\"80px\" />;\r\n              })\r\n              : topcis.map((item, idx) => <TopicBox  key={idx} topic={item} />)}\r\n          </>\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx",["128","129"],"import React, { useState, useEffect } from \"react\";\r\nimport { Box, Divider, Flex, Skeleton, useDisclosure } from \"@chakra-ui/react\";\r\n\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\nimport { useListUserThreadsQuery } from \"../generated/graphql\";\r\nimport { ProfileModal } from \"../components/ProfileModal\";\r\n\r\nexport const Profile = () => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showThreadOptions, setShowThreadOptions] = useState(false);\r\n  const { onClose } = useDisclosure({\r\n    onClose: () => {\r\n      setShowModal(false)\r\n    },\r\n\r\n  });\r\n  const { data, loading, refetch } = useListUserThreadsQuery({\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  \r\n  const createNewThread = () => setShowModal(true);\r\n\r\n  let ThreadSection: any = null;\r\n  if (loading) {\r\n    ThreadSection = <FastBigSpinner />;\r\n  } else if (data) {\r\n    ThreadSection = (\r\n      <>\r\n        {data.listUserThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              threadId={thread.id}\r\n              question={thread.question}\r\n              createdAt={thread.createdAt}\r\n              specializtion={thread.specialization}\r\n              showThreadOptions={showThreadOptions}\r\n              setShowThreadOptions={setShowThreadOptions}\r\n              refetchProfileThreads={refetch}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ProfileModal refetchProfileThreads={refetch} setShowModal={setShowModal} showModal={showModal} onClose={onClose} />\r\n      <Box\r\n        marginLeft=\"1rem\"\r\n        marginY=\"1rem\"\r\n        fontSize=\"30px\"\r\n        fontFamily=\"fantasy\"\r\n        fontWeight=\"bold\"\r\n        color=\"gray.500\"\r\n        textShadow=\"lg\"\r\n      >\r\n        Threads created by you\r\n        <Divider mt=\"0.5rem\" w=\"350px\" />\r\n      </Box>\r\n      <Flex marginRight=\"auto\" marginLeft=\"auto\" marginTop=\"2rem\">\r\n        <Flex\r\n          justifyContent=\"center\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n          flex=\"4\"\r\n          shadow=\"base\"\r\n          p=\"1rem\"\r\n        >\r\n          {ThreadSection}\r\n        </Flex>\r\n\r\n        <Flex\r\n          flex=\"1\"\r\n          p=\"1rem\"\r\n          flexDirection=\"column\"\r\n          maxH=\"auto\"\r\n          marginX=\"8px\"\r\n        >\r\n          <Box p=\"1rem\" shadow=\"base\" marginBottom=\"2rem\">\r\n            <Box\r\n              as=\"button\"\r\n              width=\"100%\"\r\n              onClick={() => createNewThread()}\r\n              textAlign=\"center\"\r\n              p=\"0.8rem\"\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              create a new thread\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* <QuestionForm refetch={refetch} /> */}\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n",["130","131"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx",["132","133","134"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setAccessToken } from \"./accessToken\";\n\nimport { Header2 } from \"./components/Header2\";\nimport { Footer } from \"./components/Footer\";\nimport { Skeleton } from \"./smallComps/Skeleton\";\n\nimport { useIsUserLoggedInQuery } from \"./generated/graphql\";\nimport { BaseRouter } from \"./routes\";\nimport { Container, Spinner } from \"@chakra-ui/react\";\n\nimport {FastBigSpinner} from \"./smallComps/Spinners\"\n\nfunction App() {\n  const [appLoading, setAppLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/refresh_token\", {\n      credentials: \"include\",\n      method: \"POST\",\n    }).then(async (x) => {\n      const resposne = await x.json();\n      setAccessToken(resposne.accessToken);\n      setAppLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {appLoading ? (\n        <Container marginLeft=\"auto\" marginRight=\"auto\" marginTop=\"10rem\">\n          <FastBigSpinner />\n        </Container>\n      ) : (\n        <>\n          <BrowserRouter>\n            {/* <Header /> */}\n            <Header2 />\n            <Skeleton>\n              <BaseRouter />\n            </Skeleton>\n            <Footer />\n          </BrowserRouter>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx",["135","136"],"import \"./index.css\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {theme} from \"./theme\"\n\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  createHttpLink,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\n\n// import { onError } from '@apollo/client/link/error';\n\n// const authMiddlewareLink = new ApolloLink((operation, forward) => {\n//   const accessToken = getAccessToken()\n//   operation.setContext({\n//     headers: {\n//       authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//   return forward(operation);\n// });\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\",\n  credentials: \"include\",\n});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `Bearer ${accessToken}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) {\n      return true;\n    }\n    try {\n      const tokenDecoded: any = jwtDecode(token);\n      const expDate: number = tokenDecoded.exp;\n      if (Date.now() >= expDate * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(\"http://localhost:8000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nexport const client = new ApolloClient({\n  cache,\n\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    tokenRefreshLink,\n    requestLink,\n    httpLink,\n  ]),\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx",["137","138","139","140","141","142","143","144","145","146"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx",["147","148","149"],"import React from \"react\";\r\nimport { Container, Flex, Center, Box } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface NavLink {\r\n  route: string;\r\n  icon?: ReactNode;\r\n}\r\n\r\nexport const LinkBox: React.FC<NavLink> = ({ route, icon }) => {\r\n  return (\r\n    <Link to={route !== \"Home\" ? `/${route}` : \"/\"}>\r\n      <Box\r\n        // mx=\"0.4rem\"\r\n        \r\n        _hover={{\r\n          bgColor: \"green.400\",\r\n          borderRadius: \"-10px\"\r\n        }}\r\n        padding=\"1rem\"\r\n      >\r\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Box marginRight=\"6px\">{icon}</Box> {route}\r\n        </Box>\r\n      </Box>\r\n    </Link>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx",["150"],"import React, { useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({}) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [register] = useRegisterMutation();\r\n\r\n  const registerNewUser = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    \r\n    if (!username || !email || !password) {\r\n      return console.log(\"enter some data\");\r\n    }\r\n    register({\r\n      variables: {\r\n        username,\r\n        email,\r\n        password,\r\n      },\r\n    }).then((response) => {\r\n      console.log(response);\r\n    });\r\n    setEmail(\"\");\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"signup-form\">\r\n        <label htmlFor=\"username\">username: </label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">password: </label>\r\n        <input\r\n          id=\"password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">email: </label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <button onClick={(e) => registerNewUser(e)}>Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx",["151"],"import React, { useState } from \"react\";\r\nimport { useListThreadsQuery } from \"../generated/graphql\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Box, Divider, Flex } from \"@chakra-ui/react\";\r\n\r\nimport { QuestionForm } from \"../smallComps/QuestionForm\";\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\nimport { BiBarChartAlt } from \"react-icons/bi\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { Skeleton } from \"../smallComps/Skeleton\"\r\n\r\nexport const Home: React.FC<RouteComponentProps> = ({ history, location }) => {\r\n  const [threadsHeader, setThreadsHeader] = useState(\"Most trendy threads\");\r\n  const { data, loading, refetch } = useListThreadsQuery({\r\n    fetchPolicy: \"cache-first\",\r\n    variables: {\r\n      sortBy: threadsHeader.split(\" \")[1],\r\n    },\r\n  });\r\n\r\n  let ThreadsComp: any = null;\r\n  if (loading) {\r\n    ThreadsComp = <FastBigSpinner />;\r\n  } else if (data) {\r\n    ThreadsComp = (\r\n      <>\r\n        {data.listThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              question={thread.question}\r\n              username={thread.threadCreator}\r\n              createdAt={thread.createdAt}\r\n              repliesCount={thread.replies?.length}\r\n              specializtion={thread.specialization}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    < >\r\n\r\n      <Box\r\n        marginLeft=\"1rem\"\r\n        marginTop=\"1rem\"\r\n        fontSize=\"30px\"\r\n        fontFamily=\"fantasy\"\r\n        fontWeight=\"bold\"\r\n        color=\"gray.500\"\r\n        textShadow=\"lg\"\r\n        width=\"500px\"\r\n      >\r\n        {threadsHeader}\r\n        <Divider />\r\n      </Box>\r\n\r\n      <Flex marginTop=\"2rem\">\r\n\r\n        <Flex\r\n          justifyContent=\"center\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n          flex=\"4\"\r\n          shadow=\"base\"\r\n          p=\"1rem\"\r\n        >\r\n          {ThreadsComp}\r\n        </Flex>\r\n\r\n        <Flex\r\n          flex=\"1\"\r\n          p=\"1rem\"\r\n          flexDirection=\"column\"\r\n          maxH=\"auto\"\r\n          marginX=\"8px\"\r\n        >\r\n          <Box p=\"1rem\" shadow=\"base\" marginBottom=\"2rem\">\r\n            <Box\r\n              onClick={() => setThreadsHeader(\"Most trendy threads\")}\r\n              textAlign=\"center\"\r\n              p=\"0.8rem\"\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              <Flex justify=\"center\" align=\"center\">\r\n                <BiBarChartAlt size=\"25px\" style={{ marginRight: \"5px\" }} />\r\n                most answers\r\n              </Flex>\r\n            </Box>\r\n\r\n            <Box\r\n              onClick={() => setThreadsHeader(\"Most recent threads\")}\r\n              textAlign=\"center\"\r\n              p=\"0.8rem\"\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              <Flex justify=\"center\" align=\"center\">\r\n                <FiClock size=\"25px\" style={{ marginRight: \"5px\" }} />\r\n                most recent\r\n              </Flex>\r\n            </Box>\r\n          </Box>\r\n\r\n          <QuestionForm refetch={refetch} />\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx",["152","153","154","155","156","157","158","159","160","161","162","163","164"],"import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { setAccessToken } from '../accessToken'\r\nimport { Message } from '../components/Message'\r\nimport { IsUserLoggedInDocument, IsUserLoggedInQuery, MeDocument, MeQuery, useIsUserLoggedInQuery, useLoginMutation } from '../generated/graphql'\r\nimport { ApolloError } from \"@apollo/client/errors\"\r\n\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showMessage, setShowMessage] = useState({\r\n        show: false,\r\n        value: \"\"\r\n    })\r\n    const [login, { data, client }] = useLoginMutation()\r\n\r\n    const loginUser = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault()\r\n        try {\r\n\r\n            const response = await login({\r\n                variables: {\r\n                    username,\r\n                    password\r\n                },\r\n                update: (cache, { data }) => {\r\n                    if (!data) {\r\n                        return null;\r\n                    }\r\n                    // cache.writeQuery<MeQuery>({\r\n                    //     query: MeDocument,\r\n                    //     data: {\r\n                    //         me: data.loginUser?.user\r\n                    //     }\r\n                    // })\r\n                    // cache.writeQuery<IsUserLoggedInQuery>({\r\n                    //     query: IsUserLoggedInDocument,\r\n                    //     data: {\r\n                    //         isUserLoggedIn: true\r\n                    //     }\r\n                    // })\r\n\r\n                },\r\n            })\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.loginUser?.accessToken!)\r\n                history.push(\"/\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch (error) {\r\n            setShowMessage({ show: true, value: error.message })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"login-form\">\r\n                {showMessage.show && (\r\n                    <Message message={showMessage.value} />\r\n                )}\r\n                <label htmlFor=\"username\">username: </label>\r\n                <input id=\"username\" type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <label htmlFor=\"password\">password: </label>\r\n                <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                <button onClick={e => loginUser(e)}>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx",["165","166","167","168","169"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  VStack,\r\n  Button,\r\n  Center,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useLoginMutation,\r\n} from \"../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nexport const LoginFrom = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showMessage, setShowMessage] = useState({\r\n    show: false,\r\n    value: \"\",\r\n  });\r\n\r\n  const [login] = useLoginMutation();\r\n\r\n  const history = useHistory();\r\n  const submitLoginForm = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    console.log(\"submit form\");\r\n    try {\r\n      const response = await login({\r\n        variables: {\r\n          username,\r\n          password,\r\n        },\r\n        update: (cache, { data }) => {\r\n          if (!data) {\r\n            return null;\r\n          }\r\n          // cache.writeQuery<MeQuery>({\r\n          //     query: MeDocument,\r\n          //     data: {\r\n          //         me: data.loginUser?.user\r\n          //     }\r\n          // })\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: true,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      if (response && response.data) {\r\n        // console.log(response.data);\r\n\r\n        setAccessToken(response.data.loginUser?.accessToken!);\r\n        history.push(\"/\");\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n      }\r\n    } catch (error) {\r\n      setShowMessage({ show: true, value: error.message });\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Container padding=\"0.4rem\" color=\"green.400\">\r\n      <form onSubmit={(e) => submitLoginForm(e)}>\r\n        <FormControl id=\"username\" isRequired my=\"5px\">\r\n          <FormLabel>Username</FormLabel>\r\n          <Input\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"password\" isRequired my=\"5px\">\r\n          <FormLabel>Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <Center>\r\n          <Button my=\"10px\" p=\"10px\" type=\"submit\">\r\n            login\r\n          </Button>\r\n        </Center>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx",["170","171","172","173","174"],{"ruleId":"175","severity":1,"message":"176","line":3,"column":17,"nodeType":"177","messageId":"178","endLine":3,"endColumn":26},{"ruleId":"175","severity":1,"message":"179","line":56,"column":26,"nodeType":"177","messageId":"178","endLine":56,"endColumn":32},{"ruleId":"175","severity":1,"message":"180","line":3,"column":31,"nodeType":"177","messageId":"178","endLine":3,"endColumn":38},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"175","severity":1,"message":"185","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":32},{"ruleId":"175","severity":1,"message":"186","line":6,"column":3,"nodeType":"177","messageId":"178","endLine":6,"endColumn":12},{"ruleId":"175","severity":1,"message":"187","line":7,"column":3,"nodeType":"177","messageId":"178","endLine":7,"endColumn":7},{"ruleId":"175","severity":1,"message":"188","line":8,"column":3,"nodeType":"177","messageId":"178","endLine":8,"endColumn":9},{"ruleId":"175","severity":1,"message":"189","line":9,"column":3,"nodeType":"177","messageId":"178","endLine":9,"endColumn":9},{"ruleId":"175","severity":1,"message":"190","line":10,"column":3,"nodeType":"177","messageId":"178","endLine":10,"endColumn":14},{"ruleId":"175","severity":1,"message":"191","line":11,"column":3,"nodeType":"177","messageId":"178","endLine":11,"endColumn":12},{"ruleId":"175","severity":1,"message":"192","line":12,"column":3,"nodeType":"177","messageId":"178","endLine":12,"endColumn":8},{"ruleId":"175","severity":1,"message":"193","line":14,"column":3,"nodeType":"177","messageId":"178","endLine":14,"endColumn":10},{"ruleId":"175","severity":1,"message":"176","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"194","line":2,"column":30,"nodeType":"177","messageId":"178","endLine":2,"endColumn":38},{"ruleId":"181","replacedBy":"195"},{"ruleId":"183","replacedBy":"196"},{"ruleId":"175","severity":1,"message":"197","line":1,"column":38,"nodeType":"177","messageId":"178","endLine":1,"endColumn":44},{"ruleId":"175","severity":1,"message":"185","line":9,"column":10,"nodeType":"177","messageId":"178","endLine":9,"endColumn":32},{"ruleId":"175","severity":1,"message":"193","line":11,"column":21,"nodeType":"177","messageId":"178","endLine":11,"endColumn":28},{"ruleId":"175","severity":1,"message":"198","line":14,"column":3,"nodeType":"177","messageId":"178","endLine":14,"endColumn":6},{"ruleId":"175","severity":1,"message":"199","line":15,"column":3,"nodeType":"177","messageId":"178","endLine":15,"endColumn":17},{"ruleId":"175","severity":1,"message":"186","line":3,"column":3,"nodeType":"177","messageId":"178","endLine":3,"endColumn":12},{"ruleId":"175","severity":1,"message":"200","line":8,"column":3,"nodeType":"177","messageId":"178","endLine":8,"endColumn":9},{"ruleId":"175","severity":1,"message":"201","line":11,"column":10,"nodeType":"177","messageId":"178","endLine":11,"endColumn":18},{"ruleId":"175","severity":1,"message":"202","line":11,"column":20,"nodeType":"177","messageId":"178","endLine":11,"endColumn":27},{"ruleId":"175","severity":1,"message":"203","line":18,"column":3,"nodeType":"177","messageId":"178","endLine":18,"endColumn":13},{"ruleId":"175","severity":1,"message":"204","line":35,"column":11,"nodeType":"177","messageId":"178","endLine":35,"endColumn":17},{"ruleId":"175","severity":1,"message":"205","line":35,"column":19,"nodeType":"177","messageId":"178","endLine":35,"endColumn":25},{"ruleId":"175","severity":1,"message":"179","line":73,"column":24,"nodeType":"177","messageId":"178","endLine":73,"endColumn":30},{"ruleId":"206","severity":1,"message":"207","line":122,"column":49,"nodeType":"208","messageId":"209","endLine":122,"endColumn":52},{"ruleId":"175","severity":1,"message":"210","line":125,"column":9,"nodeType":"177","messageId":"178","endLine":125,"endColumn":20},{"ruleId":"175","severity":1,"message":"186","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":19},{"ruleId":"175","severity":1,"message":"187","line":2,"column":21,"nodeType":"177","messageId":"178","endLine":2,"endColumn":25},{"ruleId":"175","severity":1,"message":"200","line":2,"column":27,"nodeType":"177","messageId":"178","endLine":2,"endColumn":33},{"ruleId":"206","severity":1,"message":"207","line":5,"column":57,"nodeType":"208","messageId":"209","endLine":5,"endColumn":59},{"ruleId":"175","severity":1,"message":"194","line":11,"column":10,"nodeType":"177","messageId":"178","endLine":11,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"211","line":1,"column":38,"nodeType":"177","messageId":"178","endLine":1,"endColumn":45},{"ruleId":"175","severity":1,"message":"212","line":1,"column":47,"nodeType":"177","messageId":"178","endLine":1,"endColumn":58},{"ruleId":"175","severity":1,"message":"213","line":5,"column":10,"nodeType":"177","messageId":"178","endLine":5,"endColumn":32},{"ruleId":"175","severity":1,"message":"214","line":5,"column":34,"nodeType":"177","messageId":"178","endLine":5,"endColumn":53},{"ruleId":"175","severity":1,"message":"215","line":5,"column":55,"nodeType":"177","messageId":"178","endLine":5,"endColumn":65},{"ruleId":"175","severity":1,"message":"216","line":5,"column":67,"nodeType":"177","messageId":"178","endLine":5,"endColumn":74},{"ruleId":"175","severity":1,"message":"185","line":5,"column":76,"nodeType":"177","messageId":"178","endLine":5,"endColumn":98},{"ruleId":"175","severity":1,"message":"217","line":6,"column":10,"nodeType":"177","messageId":"178","endLine":6,"endColumn":21},{"ruleId":"175","severity":1,"message":"218","line":12,"column":12,"nodeType":"177","messageId":"178","endLine":12,"endColumn":17},{"ruleId":"175","severity":1,"message":"219","line":12,"column":19,"nodeType":"177","messageId":"178","endLine":12,"endColumn":27},{"ruleId":"175","severity":1,"message":"220","line":18,"column":21,"nodeType":"177","messageId":"178","endLine":18,"endColumn":25},{"ruleId":"175","severity":1,"message":"179","line":18,"column":27,"nodeType":"177","messageId":"178","endLine":18,"endColumn":33},{"ruleId":"175","severity":1,"message":"176","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":36},{"ruleId":"175","severity":1,"message":"188","line":6,"column":3,"nodeType":"177","messageId":"178","endLine":6,"endColumn":9},{"ruleId":"175","severity":1,"message":"218","line":21,"column":10,"nodeType":"177","messageId":"178","endLine":21,"endColumn":15},{"ruleId":"175","severity":1,"message":"219","line":21,"column":17,"nodeType":"177","messageId":"178","endLine":21,"endColumn":25},{"ruleId":"175","severity":1,"message":"221","line":23,"column":10,"nodeType":"177","messageId":"178","endLine":23,"endColumn":21},{"ruleId":"175","severity":1,"message":"189","line":3,"column":3,"nodeType":"177","messageId":"178","endLine":3,"endColumn":9},{"ruleId":"175","severity":1,"message":"222","line":9,"column":3,"nodeType":"177","messageId":"178","endLine":9,"endColumn":14},{"ruleId":"175","severity":1,"message":"223","line":10,"column":3,"nodeType":"177","messageId":"178","endLine":10,"endColumn":14},{"ruleId":"175","severity":1,"message":"224","line":11,"column":3,"nodeType":"177","messageId":"178","endLine":11,"endColumn":16},{"ruleId":"175","severity":1,"message":"225","line":12,"column":3,"nodeType":"177","messageId":"178","endLine":12,"endColumn":10},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'client' is assigned a value but never used.","'Tooltip' is defined but never used.","no-native-reassign",["226"],"no-negated-in-lhs",["227"],"'useIsUserLoggedInQuery' is defined but never used.","'Container' is defined but never used.","'Flex' is defined but never used.","'VStack' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'Spinner' is defined but never used.","'Skeleton' is defined but never used.",["226"],["227"],"'useRef' is defined but never used.","'gql' is defined but never used.","'createHttpLink' is defined but never used.","'Center' is defined but never used.","'MoonIcon' is defined but never used.","'SunIcon' is defined but never used.","'useMeQuery' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'currentMode' is assigned a value but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'data' is assigned a value but never used.","'showMessage' is assigned a value but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Heading' is defined but never used.","no-global-assign","no-unsafe-negation"]