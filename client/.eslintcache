[{"F:\\stuff\\code\\NewSpec\\client\\src\\App.tsx":"1","F:\\stuff\\code\\NewSpec\\client\\src\\index.tsx":"2","F:\\stuff\\code\\NewSpec\\client\\src\\reportWebVitals.ts":"3","F:\\stuff\\code\\NewSpec\\client\\src\\generated\\graphql.tsx":"4","F:\\stuff\\code\\NewSpec\\client\\src\\routes.tsx":"5","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Register.tsx":"6","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Home.tsx":"7","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Test.tsx":"8","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Login.tsx":"9","F:\\stuff\\code\\NewSpec\\client\\src\\components\\Header.tsx":"10","F:\\stuff\\code\\NewSpec\\client\\src\\accessToken.ts":"11","F:\\stuff\\code\\NewSpec\\client\\src\\components\\Message.tsx":"12"},{"size":882,"mtime":1608423621844,"results":"13","hashOfConfig":"14"},{"size":3554,"mtime":1608320049650,"results":"15","hashOfConfig":"14"},{"size":425,"mtime":1607784182783,"results":"16","hashOfConfig":"14"},{"size":14698,"mtime":1608234208985,"results":"17","hashOfConfig":"14"},{"size":631,"mtime":1608322046546,"results":"18","hashOfConfig":"14"},{"size":1587,"mtime":1608319635827,"results":"19","hashOfConfig":"14"},{"size":616,"mtime":1608427102362,"results":"20","hashOfConfig":"14"},{"size":743,"mtime":1608140112951,"results":"21","hashOfConfig":"14"},{"size":2783,"mtime":1608429319102,"results":"22","hashOfConfig":"14"},{"size":1698,"mtime":1608430360480,"results":"23","hashOfConfig":"14"},{"size":231,"mtime":1607976985837,"results":"24","hashOfConfig":"14"},{"size":257,"mtime":1608247848046,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a8898h",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\stuff\\code\\NewSpec\\client\\src\\App.tsx",["57"],"F:\\stuff\\code\\NewSpec\\client\\src\\index.tsx",["58","59"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n\n  ApolloProvider, ApolloClient, InMemoryCache, gql, createHttpLink,\n  HttpLink, ApolloLink, Observable\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\"\nimport jwtDecode from \"jwt-decode\";\n\nimport { getAccessToken, setAccessToken } from './accessToken';\n\n// import { onError } from '@apollo/client/link/error';\n\n\n// const authMiddlewareLink = new ApolloLink((operation, forward) => {\n//   const accessToken = getAccessToken()\n//   operation.setContext({\n//     headers: {\n//       authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//   return forward(operation);\n// });\n\nconst cache = new InMemoryCache()\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:8000/graphql',\n  credentials: 'include'\n})\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable(observer => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then(operation => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `Bearer ${accessToken}`\n              }\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) {\n      return true;\n    }\n    try {\n      const tokenDecoded: any = jwtDecode(token);\n      const expDate: number = tokenDecoded.exp\n      if (Date.now() >= expDate * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(\"http://localhost:8000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\"\n    });\n  },\n  handleFetch: accessToken => {\n    setAccessToken(accessToken);\n  },\n  handleError: err => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  }\n})\n\n\nexport const client = new ApolloClient(\n  {\n    cache,\n\n    link: ApolloLink.from([\n      onError(({ graphQLErrors, networkError }) => {\n        if (graphQLErrors) {\n          graphQLErrors.map(({ message, locations, path }) =>\n            console.log(\n              `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n            ),\n          );\n\n        }\n\n        if (networkError) {\n          console.log(`[Network error]: ${networkError}`);\n        }\n      }),\n      tokenRefreshLink,\n      requestLink,\n      httpLink,\n    ]),\n\n  });\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["60","61"],"F:\\stuff\\code\\NewSpec\\client\\src\\reportWebVitals.ts",[],["62","63"],"F:\\stuff\\code\\NewSpec\\client\\src\\generated\\graphql.tsx",[],"F:\\stuff\\code\\NewSpec\\client\\src\\routes.tsx",["64"],"import React from 'react'\r\nimport { Switch, Route } from \"react-router-dom\"\r\n\r\nimport { Register } from \"./pages/Register\"\r\nimport { Home } from \"./pages/Home\"\r\nimport { Test } from \"./pages/Test\"\r\nimport { Login } from \"./pages/Login\"\r\n\r\nimport { Header } from \"./components/Header\"\r\nexport const BaseRouter: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/test\" component={Test} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\n","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Register.tsx",["65"],"F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Home.tsx",["66","67","68","69","70","71"],"F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Test.tsx",["72","73"],"import React from 'react'\r\nimport { getAccessToken } from '../accessToken';\r\nimport { useUsersListQuery } from '../generated/graphql';\r\n\r\ninterface TestProps {\r\n\r\n}\r\n\r\nexport const Test: React.FC<TestProps> = () => {\r\n    const { data, error, loading } = useUsersListQuery({\r\n        fetchPolicy: \"network-only\"\r\n    })\r\n\r\n    if (loading) {\r\n        return (<div>loading......</div>)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <h1>\r\n                Current Users:\r\n            </h1>\r\n            <ul>\r\n                {data?.getAllUsers?.map((user, idx) =>\r\n                (\r\n                    <li key={idx}>{user.email}, {user.username}</li>\r\n                )\r\n                )}\r\n            </ul>\r\n\r\n        </div>\r\n    );\r\n}","F:\\stuff\\code\\NewSpec\\client\\src\\pages\\Login.tsx",["74","75","76","77","78","79"],"F:\\stuff\\code\\NewSpec\\client\\src\\components\\Header.tsx",["80","81","82","83","84","85","86","87","88","89"],"F:\\stuff\\code\\NewSpec\\client\\src\\accessToken.ts",["90"],"import jwtDecode from \"jwt-decode\"\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(\"accessToken\")\r\n}\r\n\r\nexport const setAccessToken = (token: string) => {\r\n    localStorage.setItem(\"accessToken\", token)\r\n}",["91","92"],"F:\\stuff\\code\\NewSpec\\client\\src\\components\\Message.tsx",[],{"ruleId":"93","severity":1,"message":"94","line":1,"column":38,"nodeType":"95","messageId":"96","endLine":1,"endColumn":44},{"ruleId":"93","severity":1,"message":"97","line":9,"column":48,"nodeType":"95","messageId":"96","endLine":9,"endColumn":51},{"ruleId":"93","severity":1,"message":"98","line":9,"column":53,"nodeType":"95","messageId":"96","endLine":9,"endColumn":67},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"99","replacedBy":"103"},{"ruleId":"101","replacedBy":"104"},{"ruleId":"93","severity":1,"message":"105","line":9,"column":10,"nodeType":"95","messageId":"96","endLine":9,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":6,"column":57,"nodeType":"108","messageId":"109","endLine":6,"endColumn":60},{"ruleId":"93","severity":1,"message":"110","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"111","line":5,"column":11,"nodeType":"95","messageId":"96","endLine":5,"endColumn":20},{"ruleId":"93","severity":1,"message":"112","line":11,"column":19,"nodeType":"95","messageId":"96","endLine":11,"endColumn":24},{"ruleId":"93","severity":1,"message":"113","line":11,"column":26,"nodeType":"95","messageId":"96","endLine":11,"endColumn":33},{"ruleId":"93","severity":1,"message":"114","line":11,"column":35,"nodeType":"95","messageId":"96","endLine":11,"endColumn":41},{"ruleId":"115","severity":1,"message":"116","line":16,"column":8,"nodeType":"117","endLine":16,"endColumn":10,"suggestions":"118"},{"ruleId":"93","severity":1,"message":"119","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":24},{"ruleId":"93","severity":1,"message":"112","line":10,"column":19,"nodeType":"95","messageId":"96","endLine":10,"endColumn":24},{"ruleId":"93","severity":1,"message":"120","line":1,"column":47,"nodeType":"95","messageId":"96","endLine":1,"endColumn":58},{"ruleId":"93","severity":1,"message":"121","line":6,"column":10,"nodeType":"95","messageId":"96","endLine":6,"endColumn":21},{"ruleId":"93","severity":1,"message":"122","line":11,"column":12,"nodeType":"95","messageId":"96","endLine":11,"endColumn":17},{"ruleId":"93","severity":1,"message":"123","line":11,"column":19,"nodeType":"95","messageId":"96","endLine":11,"endColumn":27},{"ruleId":"115","severity":1,"message":"124","line":21,"column":9,"nodeType":"117","endLine":21,"endColumn":15,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"126","line":28,"column":8,"nodeType":"117","endLine":28,"endColumn":10,"suggestions":"127"},{"ruleId":"93","severity":1,"message":"128","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"110","line":1,"column":28,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"129","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":32},{"ruleId":"93","severity":1,"message":"130","line":2,"column":34,"nodeType":"95","messageId":"96","endLine":2,"endColumn":53},{"ruleId":"93","severity":1,"message":"131","line":2,"column":55,"nodeType":"95","messageId":"96","endLine":2,"endColumn":65},{"ruleId":"93","severity":1,"message":"132","line":2,"column":67,"nodeType":"95","messageId":"96","endLine":2,"endColumn":74},{"ruleId":"93","severity":1,"message":"133","line":2,"column":76,"nodeType":"95","messageId":"96","endLine":2,"endColumn":98},{"ruleId":"93","severity":1,"message":"97","line":3,"column":10,"nodeType":"95","messageId":"96","endLine":3,"endColumn":13},{"ruleId":"93","severity":1,"message":"134","line":3,"column":15,"nodeType":"95","messageId":"96","endLine":3,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":11,"column":47,"nodeType":"108","messageId":"109","endLine":11,"endColumn":50},{"ruleId":"93","severity":1,"message":"135","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":17},{"ruleId":"99","replacedBy":"136"},{"ruleId":"101","replacedBy":"137"},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'gql' is defined but never used.","'createHttpLink' is defined but never used.","no-native-reassign",["138"],"no-negated-in-lhs",["139"],["138"],["139"],"'Header' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'useState' is defined but never used.","'HomeProps' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'client' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data?.isUserLoggedIn'. Either include it or remove the dependency array.","ArrayExpression",["140"],"'getAccessToken' is defined but never used.","'useCallback' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'client'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has missing dependencies: 'history' and 'logged?.isUserLoggedIn'. Either include them or remove the dependency array.",["142"],"'useEffect' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'useIsUserLoggedInQuery' is defined but never used.","'useQuery' is defined but never used.","'jwtDecode' is defined but never used.",["138"],["139"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [data?.isUserLoggedIn]",{"range":"149","text":"150"},"Update the dependencies array to be: [client]",{"range":"151","text":"152"},"Update the dependencies array to be: [history, logged?.isUserLoggedIn]",{"range":"153","text":"154"},[484,486],"[data?.isUserLoggedIn]",[908,914],"[client]",[1032,1034],"[history, logged?.isUserLoggedIn]"]