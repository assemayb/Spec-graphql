[{"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts":"1","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx":"2","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx":"3","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx":"4","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts":"5","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header.tsx":"6","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx":"7","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx":"8","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx":"9","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx":"10","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx":"11","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx":"12","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx":"13","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx":"14","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx":"15","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx":"16","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx":"17","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx":"18","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx":"19","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx":"20","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx":"21","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx":"22","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx":"23","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx":"24","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx":"25","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SortBtn.tsx":"26","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx":"27"},{"size":231,"mtime":1607976985837,"results":"28","hashOfConfig":"29"},{"size":755,"mtime":1626002465598,"results":"30","hashOfConfig":"29"},{"size":2848,"mtime":1626701175574,"results":"31","hashOfConfig":"29"},{"size":246,"mtime":1625721792159,"results":"32","hashOfConfig":"29"},{"size":425,"mtime":1607784182783,"results":"33","hashOfConfig":"29"},{"size":2262,"mtime":1625804572053,"results":"34","hashOfConfig":"29"},{"size":23665,"mtime":1626920981847,"results":"35","hashOfConfig":"29"},{"size":1661,"mtime":1625978682307,"results":"36","hashOfConfig":"29"},{"size":4746,"mtime":1626810690764,"results":"37","hashOfConfig":"29"},{"size":3470,"mtime":1626530353730,"results":"38","hashOfConfig":"29"},{"size":1382,"mtime":1626806866957,"results":"39","hashOfConfig":"29"},{"size":3686,"mtime":1626921960918,"results":"40","hashOfConfig":"29"},{"size":733,"mtime":1625978033033,"results":"41","hashOfConfig":"29"},{"size":2642,"mtime":1626660346003,"results":"42","hashOfConfig":"29"},{"size":4088,"mtime":1626894119949,"results":"43","hashOfConfig":"29"},{"size":237,"mtime":1626070254089,"results":"44","hashOfConfig":"29"},{"size":426,"mtime":1626443446668,"results":"45","hashOfConfig":"29"},{"size":723,"mtime":1626714532068,"results":"46","hashOfConfig":"29"},{"size":1567,"mtime":1626446748611,"results":"47","hashOfConfig":"29"},{"size":382,"mtime":1626377368932,"results":"48","hashOfConfig":"29"},{"size":3002,"mtime":1626878692167,"results":"49","hashOfConfig":"29"},{"size":2401,"mtime":1626885630470,"results":"50","hashOfConfig":"29"},{"size":244,"mtime":1626435092133,"results":"51","hashOfConfig":"29"},{"size":3662,"mtime":1626883193291,"results":"52","hashOfConfig":"29"},{"size":2405,"mtime":1626919538226,"results":"53","hashOfConfig":"29"},{"size":489,"mtime":1626812343616,"results":"54","hashOfConfig":"29"},{"size":821,"mtime":1626877042325,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"11skg4y",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"79"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"79"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts",["129"],"import jwtDecode from \"jwt-decode\"\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(\"accessToken\")\r\n}\r\n\r\nexport const setAccessToken = (token: string) => {\r\n    localStorage.setItem(\"accessToken\", token)\r\n}",["130","131"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx",[],["132","133"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx",["134","135","136","137","138","139","140","141","142","143","144","145","146"],"import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { setAccessToken } from '../accessToken'\r\nimport { Message } from '../components/Message'\r\nimport { IsUserLoggedInDocument, IsUserLoggedInQuery, MeDocument, MeQuery, useIsUserLoggedInQuery, useLoginMutation } from '../generated/graphql'\r\nimport { ApolloError } from \"@apollo/client/errors\"\r\n\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showMessage, setShowMessage] = useState({\r\n        show: false,\r\n        value: \"\"\r\n    })\r\n    const [login, { data, client }] = useLoginMutation()\r\n\r\n    const loginUser = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault()\r\n        try {\r\n\r\n            const response = await login({\r\n                variables: {\r\n                    username,\r\n                    password\r\n                },\r\n                update: (cache, { data }) => {\r\n                    if (!data) {\r\n                        return null;\r\n                    }\r\n                    // cache.writeQuery<MeQuery>({\r\n                    //     query: MeDocument,\r\n                    //     data: {\r\n                    //         me: data.loginUser?.user\r\n                    //     }\r\n                    // })\r\n                    // cache.writeQuery<IsUserLoggedInQuery>({\r\n                    //     query: IsUserLoggedInDocument,\r\n                    //     data: {\r\n                    //         isUserLoggedIn: true\r\n                    //     }\r\n                    // })\r\n\r\n                },\r\n            })\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.loginUser?.accessToken!)\r\n                history.push(\"/\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch (error) {\r\n            setShowMessage({ show: true, value: error.message })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"login-form\">\r\n                {showMessage.show && (\r\n                    <Message message={showMessage.value} />\r\n                )}\r\n                <label htmlFor=\"username\">username: </label>\r\n                <input id=\"username\" type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <label htmlFor=\"password\">password: </label>\r\n                <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                <button onClick={e => loginUser(e)}>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx",[],["147","148"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts",[],["149","150"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header.tsx",["151","152","153","154","155"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx",["156"],"import React, { useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({}) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [register] = useRegisterMutation();\r\n\r\n  const registerNewUser = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    \r\n    if (!username || !email || !password) {\r\n      return console.log(\"enter some data\");\r\n    }\r\n    register({\r\n      variables: {\r\n        username,\r\n        email,\r\n        password,\r\n      },\r\n    }).then((response) => {\r\n      console.log(response);\r\n    });\r\n    setEmail(\"\");\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"signup-form\">\r\n        <label htmlFor=\"username\">username: </label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">password: </label>\r\n        <input\r\n          id=\"password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">email: </label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <button onClick={(e) => registerNewUser(e)}>Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n",["157","158"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx",["159","160","161","162","163","164","165","166","167","168"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Flex,\r\n  Button,\r\n  useColorMode,\r\n  useDisclosure,\r\n  Center,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useIsUserLoggedInQuery,\r\n  useLogoutMutation,\r\n  useMeQuery,\r\n} from \"../generated/graphql\";\r\n\r\nimport { setAccessToken } from \"../accessToken\";\r\nimport { AiFillHome, AiOutlineUser } from \"react-icons/ai\";\r\nimport { BiBookContent } from \"react-icons/bi\";\r\n\r\nimport { ModalComponent } from \"../components/Modal\";\r\nimport { LinkBox } from \"../smallComps/LinkBox\";\r\nimport { SmallSpinner } from \"../smallComps/Spinners\";\r\n\r\ninterface ProfileButtonProps {\r\n  isUserLogged: boolean;\r\n}\r\n\r\nconst ProfileButton: React.FC<ProfileButtonProps> = ({ isUserLogged }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const { isOpen, onOpen, onClose } = useDisclosure({\r\n    onClose: () => setShowModal(false),\r\n    onOpen: () => console.log(\"Modal is Open\"),\r\n  });\r\n\r\n  const router = useHistory();\r\n  const handleProfileClick = () => {\r\n    if (isUserLogged === true) {\r\n      router.push(\"/profile\");\r\n    } else {\r\n      setShowModal(true);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <ModalComponent showModal={showModal} onClose={onClose} />\r\n      <Button\r\n        onClick={() => handleProfileClick()}\r\n        height=\"50%\"\r\n        fontSize=\"medium\"\r\n        fontWeight=\"bold\"\r\n        bgColor=\"green.400\"\r\n        borderRadius= \"-10px\"\r\n        _hover={{\r\n          bgColor: \"green.500\",\r\n        }}\r\n        mx=\"0.4rem\"\r\n      >\r\n        <AiOutlineUser width=\"40px\" />\r\n\r\n        <span style={{ marginLeft: \"4px\" }}>profile</span>\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\ninterface LogoutButtonProps extends ProfileButtonProps {}\r\nconst LogoutButton: React.FC<LogoutButtonProps> = ({ isUserLogged }) => {\r\n  const [logoutUser, { client }] = useLogoutMutation();\r\n\r\n  useEffect(() => {\r\n    let isMounted = false;\r\n    return () => {\r\n      console.log(\"unmounting\");\r\n      \r\n      if (isMounted === false) {\r\n        isMounted = true;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleLogout = async () => {\r\n    if (isUserLogged) {\r\n      setAccessToken(\"\");\r\n      await logoutUser({\r\n        update: async (cache, _) => {\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: false,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      // await client.resetStore();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      onClick={() => handleLogout()}\r\n      height=\"50%\"\r\n      fontSize=\"medium\"\r\n      fontWeight=\"bold\"\r\n      bgColor=\"green.400\"\r\n      borderRadius=\"-10px\"\r\n      _hover={{\r\n        bgColor: \"green.500\",\r\n      }}\r\n      mx=\"0.4rem\"\r\n    >\r\n      Logout\r\n    </Button>\r\n  );\r\n};\r\n\r\ninterface Header2Props {}\r\nexport const Header2: React.FC<Header2Props> = ({}) => {\r\n  // const { data, loading, error } = useMeQuery();\r\n\r\n  const currentMode = useColorMode();\r\n  const loginState = useIsUserLoggedInQuery({\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  return (\r\n    <Flex\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      bgColor=\"green.300\"\r\n      height=\"80px\"\r\n      fontSize=\"xl\"\r\n      fontWeight=\"bold\"\r\n      color=\"white\"\r\n      position=\"relative\"\r\n      width=\"100%\"\r\n    >\r\n      <Flex ml=\"1rem\" position=\"absolute\" left=\"2px\">\r\n        <LinkBox route=\"Home\" icon={<AiFillHome width=\"20px\" />} />\r\n        <LinkBox route=\"topics\" icon={<BiBookContent width=\"20px\" />} />\r\n        <LinkBox route=\"test\" />\r\n      </Flex>\r\n\r\n      <Flex\r\n        marginRight=\"8px\"\r\n        height=\"100px\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        position=\"absolute\"\r\n        right=\"8px\"\r\n      >\r\n        {/* <Button\r\n          onClick={() => currentMode.toggleColorMode()}\r\n          bgColor=\"green.400\"\r\n          _hover={{\r\n            bgColorome: \"green.500\",\r\n          }}\r\n          height=\"50%\"\r\n        >\r\n          {currentMode.colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\r\n        </Button> */}\r\n\r\n        {loginState && loginState.loading && (\r\n          <Box marginLeft=\"5px\">\r\n            <SmallSpinner />\r\n          </Box>\r\n        )}\r\n        {loginState && !loginState.data?.isUserLoggedIn ? (\r\n          <ProfileButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n        ) : (\r\n          <>\r\n            <ProfileButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n            <LogoutButton isUserLogged={loginState.data?.isUserLoggedIn!} />\r\n          </>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx",["169","170"],"import \"./index.css\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {theme} from \"./theme\"\n\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  createHttpLink,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\n\n// import { onError } from '@apollo/client/link/error';\n\n// const authMiddlewareLink = new ApolloLink((operation, forward) => {\n//   const accessToken = getAccessToken()\n//   operation.setContext({\n//     headers: {\n//       authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//   return forward(operation);\n// });\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\",\n  credentials: \"include\",\n});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `Bearer ${accessToken}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) {\n      return true;\n    }\n    try {\n      const tokenDecoded: any = jwtDecode(token);\n      const expDate: number = tokenDecoded.exp;\n      if (Date.now() >= expDate * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(\"http://localhost:8000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nexport const client = new ApolloClient({\n  cache,\n\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    tokenRefreshLink,\n    requestLink,\n    httpLink,\n  ]),\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx",["171","172","173"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setAccessToken } from \"./accessToken\";\n\nimport { Header2 } from \"./components/Header2\";\nimport { Footer } from \"./components/Footer\";\nimport { Skeleton } from \"./smallComps/Skeleton\";\n\nimport { useIsUserLoggedInQuery } from \"./generated/graphql\";\nimport { BaseRouter } from \"./routes\";\nimport { Container, Spinner } from \"@chakra-ui/react\";\n\nimport {FastBigSpinner} from \"./smallComps/Spinners\"\n\nfunction App() {\n  const [appLoading, setAppLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/refresh_token\", {\n      credentials: \"include\",\n      method: \"POST\",\n    }).then(async (x) => {\n      const resposne = await x.json();\n      console.log(resposne.accessToken);\n      setAccessToken(resposne.accessToken);\n      setAppLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {appLoading ? (\n        <Container marginLeft=\"auto\" marginRight=\"auto\" marginTop=\"10rem\">\n          <FastBigSpinner />\n        </Container>\n      ) : (\n        <>\n          <BrowserRouter>\n            {/* <Header /> */}\n            <Header2 />\n            <Skeleton>\n              <BaseRouter />\n            </Skeleton>\n            <Footer />\n          </BrowserRouter>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx",["174","175","176","177","178"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx",["179","180","181","182","183","184"],"import React from \"react\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport { useUsersListQuery } from \"../generated/graphql\";\r\nimport { Box, Container, Flex, VStack, Button } from \"@chakra-ui/react\";\r\n\r\n\r\ninterface TestProps {}\r\n\r\nexport const Test: React.FC<TestProps> = () => {\r\n  const { data, error, loading } = useUsersListQuery({\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  if (loading) {\r\n    return <div>loading......</div>;\r\n  }\r\n\r\n  return (\r\n    <Container p=\"2rem\" m=\"1rem\">\r\n      <h1>Current Users:</h1>\r\n      <ul>\r\n        {data?.getAllUsers?.map((user, idx) => (\r\n          <li key={idx}>\r\n            {user.email}, {user.username}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </Container>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx",["185","186","187","188","189"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  VStack,\r\n  Button,\r\n  Center,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useLoginMutation,\r\n} from \"../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nexport const LoginFrom = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showMessage, setShowMessage] = useState({\r\n    show: false,\r\n    value: \"\",\r\n  });\r\n\r\n  const [login] = useLoginMutation();\r\n\r\n  const history = useHistory();\r\n  const submitLoginForm = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    console.log(\"submit form\");\r\n    try {\r\n      const response = await login({\r\n        variables: {\r\n          username,\r\n          password,\r\n        },\r\n        update: (cache, { data }) => {\r\n          if (!data) {\r\n            return null;\r\n          }\r\n          // cache.writeQuery<MeQuery>({\r\n          //     query: MeDocument,\r\n          //     data: {\r\n          //         me: data.loginUser?.user\r\n          //     }\r\n          // })\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: true,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      if (response && response.data) {\r\n        console.log(response.data);\r\n\r\n        setAccessToken(response.data.loginUser?.accessToken!);\r\n        history.push(\"/\");\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n      }\r\n    } catch (error) {\r\n      setShowMessage({ show: true, value: error.message });\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Container padding=\"0.4rem\" color=\"green.400\">\r\n      <form onSubmit={(e) => submitLoginForm(e)}>\r\n        <FormControl id=\"username\" isRequired my=\"5px\">\r\n          <FormLabel>Username</FormLabel>\r\n          <Input\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"password\" isRequired my=\"5px\">\r\n          <FormLabel>Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <Center>\r\n          <Button my=\"10px\" p=\"10px\" type=\"submit\">\r\n            login\r\n          </Button>\r\n        </Center>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n",["190","191"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx",["192"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx",["193","194","195"],"import React from \"react\";\r\nimport { Container, Flex, Center, Box } from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface NavLink {\r\n  route: string;\r\n  icon?: ReactNode;\r\n}\r\n\r\nexport const LinkBox: React.FC<NavLink> = ({ route, icon }) => {\r\n  return (\r\n    <Link to={route !== \"Home\" ? route : \"/\"}>\r\n      <Box\r\n        // mx=\"0.4rem\"\r\n        \r\n        _hover={{\r\n          bgColor: \"green.400\",\r\n          borderRadius: \"-10px\"\r\n        }}\r\n        padding=\"1rem\"\r\n      >\r\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n          <Box marginRight=\"6px\">{icon}</Box> {route}\r\n        </Box>\r\n      </Box>\r\n    </Link>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx",["196","197","198","199"],"import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  ModalContent,\r\n  ModalOverlay,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  useDisclosure,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { LoginFrom } from \"./LoginFrom\";\r\nimport { RegisterFrom } from \"./RegisterForm\";\r\ninterface ModalComponentProps {\r\n  showModal: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const ModalComponent: React.FC<ModalComponentProps> = ({\r\n  showModal,\r\n  onClose,\r\n}) => {\r\n  const [displayedForm, setDisplayedForm] = useState(\"loginForm\");\r\n  return (\r\n    <>\r\n      <Modal isOpen={showModal} onClose={onClose}>\r\n        <ModalOverlay />\r\n        <ModalContent marginTop=\"8rem\">\r\n          <ModalCloseButton />\r\n\r\n          <ModalBody margin=\"1rem\">\r\n            {displayedForm === \"loginForm\" ? <LoginFrom /> : <RegisterFrom />}\r\n          </ModalBody>\r\n\r\n          {/* <ModalFooter display=\"flex\" justifyContent=\"center\"> */}\r\n            <Button\r\n              bgColor=\"green.200\"\r\n              textAlign=\"center\"\r\n              onClick={() => {\r\n                if (displayedForm === \"loginForm\") {\r\n                  setDisplayedForm(\"signupForm\");\r\n                } else {\r\n                  setDisplayedForm(\"loginForm\");\r\n                }\r\n              }}\r\n            >\r\n              {displayedForm === \"loginForm\"\r\n                ? \"create an account\"\r\n                : \"login to your acccount\"}\r\n            </Button>\r\n          {/* </ModalFooter> */}\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx",["200","201","202","203","204","205"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useIsUserLoggedInQuery,\r\n  useListThreadsQuery,\r\n} from \"../generated/graphql\";\r\n\r\nimport { Box, Divider, Flex, useDisclosure } from \"@chakra-ui/react\";\r\n\r\nimport { QuestionForm } from \"../smallComps/QuestionForm\";\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\nimport { useListUserThreadsQuery } from \"../generated/graphql\";\r\nimport {ProfileModal} from \"../components/ProfileModal\"\r\n\r\nexport const Profile = () => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const { isOpen, onOpen, onClose } = useDisclosure({\r\n      onClose: () => setShowModal(false),\r\n      onOpen: () => console.log(\"Modal is Open\"),\r\n    });\r\n  \r\n  const { data, error, loading } = useListUserThreadsQuery({\r\n    fetchPolicy: \"cache-first\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(data?.listUserThreads);\r\n  }, [data]);\r\n\r\n  function createNewThread() {\r\n    console.log(\"create new\");\r\n\r\n    // TODO: import the modal here\r\n    setShowModal(true)\r\n  }\r\n\r\n  let ThreadSection: any = null;\r\n  if (loading) {\r\n    ThreadSection = <FastBigSpinner />;\r\n  } else if (data) {\r\n    ThreadSection = (\r\n      <>\r\n        {data.listUserThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              question={thread.question}\r\n              createdAt={thread.createdAt}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n    <ProfileModal showModal={showModal} onClose={onClose}/>\r\n      <Box\r\n        marginLeft=\"1rem\"\r\n        marginY=\"1rem\"\r\n        fontSize=\"30px\"\r\n        fontFamily=\"fantasy\"\r\n        fontWeight=\"bold\"\r\n        color=\"gray.500\"\r\n        textShadow=\"lg\"\r\n      >\r\n        Threads created by you\r\n        <Divider mt=\"0.5rem\" w=\"350px\"/>\r\n      </Box>\r\n      <Flex marginRight=\"auto\" marginLeft=\"auto\" marginTop=\"2rem\">\r\n        <Flex\r\n          justifyContent=\"center\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n          flex=\"4\"\r\n          shadow=\"base\"\r\n          p=\"1rem\"\r\n        >\r\n          {ThreadSection}\r\n        </Flex>\r\n\r\n        <Flex\r\n          flex=\"1\"\r\n          p=\"1rem\"\r\n          flexDirection=\"column\"\r\n          maxH=\"auto\"\r\n          marginX=\"8px\"\r\n        >\r\n          <Box p=\"1rem\" shadow=\"base\" marginBottom=\"2rem\">\r\n            <Box\r\n              onClick={() => createNewThread()}\r\n              textAlign=\"center\"\r\n              p=\"0.8rem\"\r\n              bgColor=\"green.300\"\r\n              color=\"Window\"\r\n              borderRadius=\"-10px\"\r\n              fontWeight=\"bold\"\r\n              cursor=\"pointer\"\r\n              _hover={{\r\n                bgColor: \"green.500\",\r\n              }}\r\n              marginY=\"3px\"\r\n            >\r\n              create a new thread\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* <QuestionForm refetch={refetch} /> */}\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx",["206","207","208","209","210","211","212","213","214"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx",["215"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ListThreadsQuery,\r\n  useCreateThreadMutation,\r\n  useIsUserLoggedInQuery,\r\n} from \"../generated/graphql\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  Select,\r\n} from \"@chakra-ui/react\";\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { topicsQuery } from \"../pages/Topics\";\r\ninterface QuestionFormProps {\r\n  refetch?: () => Promise<ApolloQueryResult<ListThreadsQuery>>;\r\n  clickedFromProfilePage?: boolean;\r\n}\r\nexport const QuestionForm: React.FC<QuestionFormProps> = ({\r\n  refetch,\r\n  clickedFromProfilePage,\r\n}) => {\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [specilization, setSpecilization] = useState(\"\");\r\n\r\n  const { data } = useQuery(topicsQuery);\r\n  const [topicsArr, setTopicsArr] = useState([]);\r\n  useEffect(() => {\r\n    setTopicsArr(data?.listTopics);\r\n  }, [data]);\r\n\r\n  const [createQuestion] = useCreateThreadMutation();\r\n  const userLogginData = useIsUserLoggedInQuery();\r\n  const submitQuestion = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      await createQuestion({\r\n        variables: {\r\n          question,\r\n          spec: specilization,\r\n        },\r\n      });\r\n      if (refetch !== undefined) {\r\n        refetch();\r\n      }\r\n    } catch (error) {\r\n      console.log(error.messge);\r\n    }\r\n  };\r\n  return (\r\n    <Box>\r\n      <Heading\r\n        as=\"h3\"\r\n        fontSize=\"20px\"\r\n        textAlign=\"center\"\r\n        textColor=\"gray.400\"\r\n        marginBottom=\"4px\"\r\n      >\r\n        {/* <AiFillEdit size=\"15px\"/> */}\r\n        Create Thread\r\n      </Heading>\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        p=\"1rem\"\r\n        my=\"10px\"\r\n        // bgColor=\"gray.50\"\r\n\r\n        shadow={clickedFromProfilePage ? \"\" : \"md\"}\r\n        textAlign=\"center\"\r\n      >\r\n        <form onSubmit={(e) => submitQuestion(e)}>\r\n          <FormControl isRequired>\r\n            <FormLabel color=\"green.400\" fontWeight=\"bold\">\r\n              {\" \"}\r\n              question\r\n            </FormLabel>\r\n            <Input\r\n              borderRadius=\"-10px\"\r\n              type=\"text\"\r\n              value={question}\r\n              onChange={(e) => setQuestion(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl isRequired>\r\n            <FormLabel color=\"green.400\" fontWeight=\"bold\">\r\n              specilization\r\n            </FormLabel>\r\n            <Select\r\n              onChange={(e) => setSpecilization(e.target.value)}\r\n              fontSize=\"16px\"\r\n              defaultValue={\"disabled\"}\r\n              name=\"topic\"\r\n              variant=\"flushed\"\r\n            >\r\n              <option value=\"disabled\" disabled>\r\n                choose a topic\r\n              </option>\r\n              {topicsArr && topicsArr.map((topic, idx) => (\r\n                <option key={idx} value={topic} >\r\n                  {topic}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            {/* <Input\r\n              borderRadius=\"-10px\"\r\n              type=\"text\"\r\n              value={specilization}\r\n              onChange={(e) => setSpecilization(e.target.value)}\r\n            /> */}\r\n          </FormControl>\r\n          <Button\r\n            isDisabled={!userLogginData.data?.isUserLoggedIn}\r\n            type=\"submit\"\r\n            borderRadius=\"-20px\"\r\n            marginTop=\"12px\"\r\n            marginX=\"auto\"\r\n          >\r\n            submit\r\n          </Button>\r\n        </form>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx",["216","217","218","219","220"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SortBtn.tsx",["221","222","223","224"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Box, Divider, Flex } from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nexport const SortBtn: React.FC = ({ children }) => {\r\n  return (\r\n    <Box\r\n      textAlign=\"center\"\r\n      p=\"0.8rem\"\r\n      bgColor=\"green.300\"\r\n      color=\"Window\"\r\n      borderRadius=\"-10px\"\r\n      fontWeight=\"bold\"\r\n      cursor=\"pointer\"\r\n      _hover={{\r\n        bgColor: \"green.500\",\r\n      }}\r\n      marginY=\"3px\"\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx",["225","226","227","228","229"],{"ruleId":"230","severity":1,"message":"231","line":1,"column":8,"nodeType":"232","messageId":"233","endLine":1,"endColumn":17},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"234","replacedBy":"238"},{"ruleId":"236","replacedBy":"239"},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"241","line":1,"column":38,"nodeType":"232","messageId":"233","endLine":1,"endColumn":45},{"ruleId":"230","severity":1,"message":"242","line":1,"column":47,"nodeType":"232","messageId":"233","endLine":1,"endColumn":58},{"ruleId":"230","severity":1,"message":"243","line":5,"column":10,"nodeType":"232","messageId":"233","endLine":5,"endColumn":32},{"ruleId":"230","severity":1,"message":"244","line":5,"column":34,"nodeType":"232","messageId":"233","endLine":5,"endColumn":53},{"ruleId":"230","severity":1,"message":"245","line":5,"column":55,"nodeType":"232","messageId":"233","endLine":5,"endColumn":65},{"ruleId":"230","severity":1,"message":"246","line":5,"column":67,"nodeType":"232","messageId":"233","endLine":5,"endColumn":74},{"ruleId":"230","severity":1,"message":"247","line":5,"column":76,"nodeType":"232","messageId":"233","endLine":5,"endColumn":98},{"ruleId":"230","severity":1,"message":"248","line":6,"column":10,"nodeType":"232","messageId":"233","endLine":6,"endColumn":21},{"ruleId":"230","severity":1,"message":"249","line":12,"column":12,"nodeType":"232","messageId":"233","endLine":12,"endColumn":17},{"ruleId":"230","severity":1,"message":"250","line":12,"column":19,"nodeType":"232","messageId":"233","endLine":12,"endColumn":27},{"ruleId":"230","severity":1,"message":"251","line":18,"column":21,"nodeType":"232","messageId":"233","endLine":18,"endColumn":25},{"ruleId":"230","severity":1,"message":"252","line":18,"column":27,"nodeType":"232","messageId":"233","endLine":18,"endColumn":33},{"ruleId":"234","replacedBy":"253"},{"ruleId":"236","replacedBy":"254"},{"ruleId":"234","replacedBy":"255"},{"ruleId":"236","replacedBy":"256"},{"ruleId":"230","severity":1,"message":"243","line":3,"column":3,"nodeType":"232","messageId":"233","endLine":3,"endColumn":25},{"ruleId":"230","severity":1,"message":"244","line":4,"column":3,"nodeType":"232","messageId":"233","endLine":4,"endColumn":22},{"ruleId":"230","severity":1,"message":"257","line":11,"column":10,"nodeType":"232","messageId":"233","endLine":11,"endColumn":15},{"ruleId":"258","severity":1,"message":"259","line":15,"column":47,"nodeType":"260","messageId":"261","endLine":15,"endColumn":49},{"ruleId":"230","severity":1,"message":"262","line":31,"column":7,"nodeType":"232","messageId":"233","endLine":31,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":5,"column":57,"nodeType":"260","messageId":"261","endLine":5,"endColumn":59},{"ruleId":"234","replacedBy":"263"},{"ruleId":"236","replacedBy":"264"},{"ruleId":"230","severity":1,"message":"265","line":3,"column":3,"nodeType":"232","messageId":"233","endLine":3,"endColumn":12},{"ruleId":"230","severity":1,"message":"266","line":8,"column":3,"nodeType":"232","messageId":"233","endLine":8,"endColumn":9},{"ruleId":"230","severity":1,"message":"267","line":11,"column":10,"nodeType":"232","messageId":"233","endLine":11,"endColumn":18},{"ruleId":"230","severity":1,"message":"268","line":11,"column":20,"nodeType":"232","messageId":"233","endLine":11,"endColumn":27},{"ruleId":"230","severity":1,"message":"269","line":18,"column":3,"nodeType":"232","messageId":"233","endLine":18,"endColumn":13},{"ruleId":"230","severity":1,"message":"270","line":35,"column":11,"nodeType":"232","messageId":"233","endLine":35,"endColumn":17},{"ruleId":"230","severity":1,"message":"271","line":35,"column":19,"nodeType":"232","messageId":"233","endLine":35,"endColumn":25},{"ruleId":"230","severity":1,"message":"252","line":73,"column":24,"nodeType":"232","messageId":"233","endLine":73,"endColumn":30},{"ruleId":"258","severity":1,"message":"259","line":122,"column":49,"nodeType":"260","messageId":"261","endLine":122,"endColumn":51},{"ruleId":"230","severity":1,"message":"272","line":125,"column":9,"nodeType":"232","messageId":"233","endLine":125,"endColumn":20},{"ruleId":"230","severity":1,"message":"273","line":14,"column":3,"nodeType":"232","messageId":"233","endLine":14,"endColumn":6},{"ruleId":"230","severity":1,"message":"274","line":15,"column":3,"nodeType":"232","messageId":"233","endLine":15,"endColumn":17},{"ruleId":"230","severity":1,"message":"275","line":1,"column":38,"nodeType":"232","messageId":"233","endLine":1,"endColumn":44},{"ruleId":"230","severity":1,"message":"247","line":9,"column":10,"nodeType":"232","messageId":"233","endLine":9,"endColumn":32},{"ruleId":"230","severity":1,"message":"276","line":11,"column":21,"nodeType":"232","messageId":"233","endLine":11,"endColumn":28},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"247","line":3,"column":3,"nodeType":"232","messageId":"233","endLine":3,"endColumn":25},{"ruleId":"230","severity":1,"message":"277","line":12,"column":10,"nodeType":"232","messageId":"233","endLine":12,"endColumn":17},{"ruleId":"230","severity":1,"message":"278","line":16,"column":11,"nodeType":"232","messageId":"233","endLine":16,"endColumn":20},{"ruleId":"230","severity":1,"message":"279","line":19,"column":26,"nodeType":"232","messageId":"233","endLine":19,"endColumn":31},{"ruleId":"230","severity":1,"message":"280","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":24},{"ruleId":"230","severity":1,"message":"281","line":4,"column":10,"nodeType":"232","messageId":"233","endLine":4,"endColumn":13},{"ruleId":"230","severity":1,"message":"282","line":4,"column":26,"nodeType":"232","messageId":"233","endLine":4,"endColumn":30},{"ruleId":"230","severity":1,"message":"283","line":4,"column":32,"nodeType":"232","messageId":"233","endLine":4,"endColumn":38},{"ruleId":"230","severity":1,"message":"284","line":4,"column":40,"nodeType":"232","messageId":"233","endLine":4,"endColumn":46},{"ruleId":"230","severity":1,"message":"279","line":10,"column":17,"nodeType":"232","messageId":"233","endLine":10,"endColumn":22},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"283","line":6,"column":3,"nodeType":"232","messageId":"233","endLine":6,"endColumn":9},{"ruleId":"230","severity":1,"message":"249","line":21,"column":10,"nodeType":"232","messageId":"233","endLine":21,"endColumn":15},{"ruleId":"230","severity":1,"message":"250","line":21,"column":17,"nodeType":"232","messageId":"233","endLine":21,"endColumn":25},{"ruleId":"230","severity":1,"message":"285","line":23,"column":10,"nodeType":"232","messageId":"233","endLine":23,"endColumn":21},{"ruleId":"234","replacedBy":"286"},{"ruleId":"236","replacedBy":"287"},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"265","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":19},{"ruleId":"230","severity":1,"message":"282","line":2,"column":21,"nodeType":"232","messageId":"233","endLine":2,"endColumn":25},{"ruleId":"230","severity":1,"message":"266","line":2,"column":27,"nodeType":"232","messageId":"233","endLine":2,"endColumn":33},{"ruleId":"230","severity":1,"message":"288","line":9,"column":3,"nodeType":"232","messageId":"233","endLine":9,"endColumn":14},{"ruleId":"230","severity":1,"message":"289","line":10,"column":3,"nodeType":"232","messageId":"233","endLine":10,"endColumn":14},{"ruleId":"230","severity":1,"message":"290","line":11,"column":3,"nodeType":"232","messageId":"233","endLine":11,"endColumn":16},{"ruleId":"230","severity":1,"message":"291","line":12,"column":3,"nodeType":"232","messageId":"233","endLine":12,"endColumn":10},{"ruleId":"230","severity":1,"message":"247","line":3,"column":3,"nodeType":"232","messageId":"233","endLine":3,"endColumn":25},{"ruleId":"230","severity":1,"message":"292","line":4,"column":3,"nodeType":"232","messageId":"233","endLine":4,"endColumn":22},{"ruleId":"230","severity":1,"message":"293","line":9,"column":10,"nodeType":"232","messageId":"233","endLine":9,"endColumn":22},{"ruleId":"230","severity":1,"message":"270","line":17,"column":13,"nodeType":"232","messageId":"233","endLine":17,"endColumn":19},{"ruleId":"230","severity":1,"message":"271","line":17,"column":21,"nodeType":"232","messageId":"233","endLine":17,"endColumn":27},{"ruleId":"230","severity":1,"message":"279","line":22,"column":17,"nodeType":"232","messageId":"233","endLine":22,"endColumn":22},{"ruleId":"230","severity":1,"message":"247","line":2,"column":10,"nodeType":"232","messageId":"233","endLine":2,"endColumn":32},{"ruleId":"230","severity":1,"message":"265","line":6,"column":3,"nodeType":"232","messageId":"233","endLine":6,"endColumn":12},{"ruleId":"230","severity":1,"message":"282","line":7,"column":3,"nodeType":"232","messageId":"233","endLine":7,"endColumn":7},{"ruleId":"230","severity":1,"message":"283","line":8,"column":3,"nodeType":"232","messageId":"233","endLine":8,"endColumn":9},{"ruleId":"230","severity":1,"message":"284","line":9,"column":3,"nodeType":"232","messageId":"233","endLine":9,"endColumn":9},{"ruleId":"230","severity":1,"message":"294","line":10,"column":3,"nodeType":"232","messageId":"233","endLine":10,"endColumn":14},{"ruleId":"230","severity":1,"message":"295","line":11,"column":3,"nodeType":"232","messageId":"233","endLine":11,"endColumn":12},{"ruleId":"230","severity":1,"message":"296","line":12,"column":3,"nodeType":"232","messageId":"233","endLine":12,"endColumn":8},{"ruleId":"230","severity":1,"message":"276","line":14,"column":3,"nodeType":"232","messageId":"233","endLine":14,"endColumn":10},{"ruleId":"230","severity":1,"message":"297","line":18,"column":10,"nodeType":"232","messageId":"233","endLine":18,"endColumn":20},{"ruleId":"230","severity":1,"message":"298","line":1,"column":17,"nodeType":"232","messageId":"233","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"275","line":1,"column":38,"nodeType":"232","messageId":"233","endLine":1,"endColumn":44},{"ruleId":"230","severity":1,"message":"299","line":3,"column":24,"nodeType":"232","messageId":"233","endLine":3,"endColumn":31},{"ruleId":"230","severity":1,"message":"269","line":6,"column":10,"nodeType":"232","messageId":"233","endLine":6,"endColumn":20},{"ruleId":"230","severity":1,"message":"298","line":1,"column":17,"nodeType":"232","messageId":"233","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"240","line":1,"column":27,"nodeType":"232","messageId":"233","endLine":1,"endColumn":36},{"ruleId":"230","severity":1,"message":"299","line":3,"column":15,"nodeType":"232","messageId":"233","endLine":3,"endColumn":22},{"ruleId":"230","severity":1,"message":"282","line":3,"column":24,"nodeType":"232","messageId":"233","endLine":3,"endColumn":28},{"ruleId":"230","severity":1,"message":"284","line":3,"column":3,"nodeType":"232","messageId":"233","endLine":3,"endColumn":9},{"ruleId":"230","severity":1,"message":"288","line":9,"column":3,"nodeType":"232","messageId":"233","endLine":9,"endColumn":14},{"ruleId":"230","severity":1,"message":"289","line":10,"column":3,"nodeType":"232","messageId":"233","endLine":10,"endColumn":14},{"ruleId":"230","severity":1,"message":"290","line":11,"column":3,"nodeType":"232","messageId":"233","endLine":11,"endColumn":16},{"ruleId":"230","severity":1,"message":"291","line":12,"column":3,"nodeType":"232","messageId":"233","endLine":12,"endColumn":10},"@typescript-eslint/no-unused-vars","'jwtDecode' is defined but never used.","Identifier","unusedVar","no-native-reassign",["300"],"no-negated-in-lhs",["301"],["300"],["301"],"'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'useIsUserLoggedInQuery' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'data' is assigned a value but never used.","'client' is assigned a value but never used.",["300"],["301"],["300"],["301"],"'Login' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'isMounted' is assigned a value but never used.",["300"],["301"],"'Container' is defined but never used.","'Center' is defined but never used.","'MoonIcon' is defined but never used.","'SunIcon' is defined but never used.","'useMeQuery' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'currentMode' is assigned a value but never used.","'gql' is defined but never used.","'createHttpLink' is defined but never used.","'useRef' is defined but never used.","'Spinner' is defined but never used.","'SortBtn' is defined but never used.","'HomeProps' is defined but never used.","'error' is assigned a value but never used.","'getAccessToken' is defined but never used.","'Box' is defined but never used.","'Flex' is defined but never used.","'VStack' is defined but never used.","'Button' is defined but never used.","'showMessage' is assigned a value but never used.",["300"],["301"],"'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Heading' is defined but never used.","'useListThreadsQuery' is defined but never used.","'QuestionForm' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'AiFillEdit' is defined but never used.","'useState' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation"]