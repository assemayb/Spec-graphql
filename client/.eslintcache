[{"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx":"1","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx":"2","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts":"3","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx":"4","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx":"5","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx":"6","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx":"7","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx":"8","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx":"9","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx":"10","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx":"11","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx":"12","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx":"13","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx":"14","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx":"15","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx":"16","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx":"17","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx":"18","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx":"19","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx":"20","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx":"21","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx":"22","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx":"23","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx":"24","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx":"25","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx":"26","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Thread.tsx":"27","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts":"28","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx":"29","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ThreadSortingBtns.tsx":"30","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LikeSection.tsx":"31","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\TopicBox.tsx":"32","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\AddReplyModal.tsx":"33","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header.tsx":"34","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LogoutBtn.tsx":"35","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\NotificationBtn.tsx":"36","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ProfileBtn.tsx":"37","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\User.tsx":"38","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\hooks\\usePagintation.tsx":"39","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\PagintationSection.tsx":"40","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SideNavSection.tsx":"41","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SettingsSections.tsx":"42","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\hooks\\useGetUserThreads.tsx":"43","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Notifications.tsx":"44","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LoadingSkeleton.tsx":"45"},{"size":3303,"mtime":1631755675618,"results":"46","hashOfConfig":"47"},{"size":5555,"mtime":1631564042535,"results":"48","hashOfConfig":"47"},{"size":425,"mtime":1607784182783,"results":"49","hashOfConfig":"47"},{"size":1556,"mtime":1629412690208,"results":"50","hashOfConfig":"47"},{"size":45348,"mtime":1631731463758,"results":"51","hashOfConfig":"47"},{"size":4861,"mtime":1631565752299,"results":"52","hashOfConfig":"47"},{"size":1957,"mtime":1627163448967,"results":"53","hashOfConfig":"47"},{"size":5795,"mtime":1631570381587,"results":"54","hashOfConfig":"47"},{"size":1333,"mtime":1628236653053,"results":"55","hashOfConfig":"47"},{"size":4119,"mtime":1631563766456,"results":"56","hashOfConfig":"47"},{"size":247,"mtime":1629900289554,"results":"57","hashOfConfig":"47"},{"size":327,"mtime":1627264169528,"results":"58","hashOfConfig":"47"},{"size":1224,"mtime":1629594973558,"results":"59","hashOfConfig":"47"},{"size":402,"mtime":1631567690844,"results":"60","hashOfConfig":"47"},{"size":382,"mtime":1626377368932,"results":"61","hashOfConfig":"47"},{"size":1487,"mtime":1627974058684,"results":"62","hashOfConfig":"47"},{"size":718,"mtime":1627588144108,"results":"63","hashOfConfig":"47"},{"size":1659,"mtime":1627894070983,"results":"64","hashOfConfig":"47"},{"size":5047,"mtime":1631233750708,"results":"65","hashOfConfig":"47"},{"size":647,"mtime":1627079266812,"results":"66","hashOfConfig":"47"},{"size":2853,"mtime":1630678595025,"results":"67","hashOfConfig":"47"},{"size":2412,"mtime":1629415145739,"results":"68","hashOfConfig":"47"},{"size":246,"mtime":1627544267954,"results":"69","hashOfConfig":"47"},{"size":1303,"mtime":1627974102931,"results":"70","hashOfConfig":"47"},{"size":690,"mtime":1627265277928,"results":"71","hashOfConfig":"47"},{"size":681,"mtime":1631563750959,"results":"72","hashOfConfig":"47"},{"size":5823,"mtime":1631739826471,"results":"73","hashOfConfig":"47"},{"size":231,"mtime":1607976985837,"results":"74","hashOfConfig":"47"},{"size":3781,"mtime":1627893990669,"results":"75","hashOfConfig":"47"},{"size":1251,"mtime":1627512671435,"results":"76","hashOfConfig":"47"},{"size":1842,"mtime":1627893649452,"results":"77","hashOfConfig":"47"},{"size":1173,"mtime":1631565886323,"results":"78","hashOfConfig":"47"},{"size":2228,"mtime":1627974312146,"results":"79","hashOfConfig":"47"},{"size":2128,"mtime":1628062143677,"results":"80","hashOfConfig":"47"},{"size":1786,"mtime":1628061825273,"results":"81","hashOfConfig":"47"},{"size":3020,"mtime":1631731911198,"results":"82","hashOfConfig":"47"},{"size":1732,"mtime":1629432833319,"results":"83","hashOfConfig":"47"},{"size":1612,"mtime":1628247124703,"results":"84","hashOfConfig":"47"},{"size":2317,"mtime":1631570309365,"results":"85","hashOfConfig":"47"},{"size":2803,"mtime":1631570641139,"results":"86","hashOfConfig":"47"},{"size":1591,"mtime":1629678590891,"results":"87","hashOfConfig":"47"},{"size":4151,"mtime":1628429422446,"results":"88","hashOfConfig":"47"},{"size":801,"mtime":1629979427889,"results":"89","hashOfConfig":"47"},{"size":3341,"mtime":1631732062787,"results":"90","hashOfConfig":"47"},{"size":564,"mtime":1630678241558,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11skg4y",{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"103"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"114"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"114"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"100"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"97"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx",["201","202"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx",["203","204","205"],"import React from \"react\";\r\n\r\nimport { Box, Heading, Badge, Flex, Button } from \"@chakra-ui/react\";\r\n\r\nimport { FiUser } from \"react-icons/fi\";\r\nimport { BiRightArrowAlt } from \"react-icons/bi\";\r\nimport {\r\n  ListUserThreadsQuery,\r\n  useDeleteThreadMutation,\r\n  useListUserThreadsLazyQuery,\r\n} from \"../generated/graphql\";\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { InteractionsSection } from \"../smallComps/InteractionsSection\";\r\nimport { FiTrash2 } from \"react-icons/fi\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\ninterface QuestionBoxProps {\r\n  threadId?: number;\r\n  username?: string;\r\n  question: string;\r\n  specializtion?: string;\r\n  createdAt?: string;\r\n  repliesCount?: number;\r\n  showThreadOptions?: boolean;\r\n  fromTopicPage?: boolean;\r\n  fromSingleTopicPage?: boolean;\r\n  fromUserPage?: boolean;\r\n  setShowThreadOptions?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  // refetchProfileThreads?: () => Promise<\r\n  //   ApolloQueryResult<ListUserThreadsQuery>\r\n  // >;\r\n  refetchProfileThreads?: () => any;\r\n  setTriggerReloadInProfilePage?: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\nexport const QuestionBox: React.FC<QuestionBoxProps> = ({\r\n  threadId,\r\n  question,\r\n  username,\r\n  createdAt,\r\n  repliesCount,\r\n  specializtion,\r\n  showThreadOptions,\r\n  fromTopicPage,\r\n  fromSingleTopicPage,\r\n  fromUserPage,\r\n  setShowThreadOptions,\r\n  refetchProfileThreads,\r\n  setTriggerReloadInProfilePage,\r\n}) => {\r\n  const router = useHistory();\r\n  const [deleteReq] = useDeleteThreadMutation();\r\n  const deleteThread = async () => {\r\n    await deleteReq({\r\n      variables: {\r\n        id: threadId!,\r\n      },\r\n    });\r\n    setTimeout(() => window.location.reload(), 250);\r\n  };\r\n\r\n  const goToThread = () => {\r\n    router.push(`/threads/${threadId}`);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      pos=\"relative\"\r\n      width=\"100%\"\r\n      p={username ? \"1rem\" : \"0.5rem\"}\r\n      my=\"5px\"\r\n      shadow={username ? \"md\" : \"sm\"}\r\n      bgColor=\"gray.100\"\r\n      _hover={{\r\n        bgColor: \"gray.200\",\r\n      }}\r\n      borderRadius=\"-20px\"\r\n    >\r\n      {username && (\r\n        <Heading\r\n          fontSize={{\r\n            base: \"10px\",\r\n            md: \"1rem\",\r\n          }}\r\n          color=\"gray.400\"\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n        >\r\n          <FiUser />\r\n          <Link to={`/profiles/${username}`}>\r\n            <Box ml=\"4px\">{username}</Box>\r\n          </Link>\r\n        </Heading>\r\n      )}\r\n\r\n      <Heading\r\n        as=\"button\"\r\n        w=\"100%\"\r\n        onClick={() => goToThread()}\r\n        boxShadow=\"sm\"\r\n        cursor=\"pointer\"\r\n        marginTop=\"0.7rem\"\r\n        marginLeft=\"5px\"\r\n        marginBottom=\"0.6rem\"\r\n        p={[\"0.4rem\", \"0.4rem\", \"1.4rem\", \"1.4rem\"]}\r\n        pos=\"relative\"\r\n        borderRadius=\"-25px\"\r\n        textShadow=\"md\"\r\n        textAlign=\"left\"\r\n        color=\"#718096\"\r\n        textOverflow=\"ellipsis\"\r\n        fontSize={[\"13px\", \"16px\", \"large\", \"22px\"]}\r\n        _hover={{\r\n          color: \"green.600\",\r\n        }}\r\n      >\r\n        {question}\r\n      </Heading>\r\n\r\n      {!fromTopicPage && (\r\n        <Badge\r\n          variant=\"subtle\"\r\n          colorScheme=\"green\"\r\n          pos=\"absolute\"\r\n          p=\"0.1rem\"\r\n          right=\"1px\"\r\n          top=\"1px\"\r\n          fontSize={[\"0.5rem\", \"0.5rem\", \"0.5rem\", \"0.7rem\"]}\r\n          opacity=\"0.7\"\r\n        >\r\n          {specializtion}\r\n        </Badge>\r\n      )}\r\n\r\n      {!username && (\r\n        <Flex marginLeft=\"6px\" p=\"0.2rem\" marginTop=\"6px\">\r\n          {!fromUserPage && (\r\n            <Button\r\n              onClick={() => deleteThread()}\r\n              bgColor=\"whiteAlpha.600\"\r\n              width={{\r\n                base: \"80px\",\r\n                md: \"120px\",\r\n              }}\r\n              p={{\r\n                base: \"0.4rem\",\r\n                md: \"1rem\",\r\n              }}\r\n              height={{\r\n                base: \"25px\",\r\n                md: \"40px\",\r\n              }}\r\n              fontSize={{\r\n                base: \"10px\",\r\n                md: \"1rem\",\r\n              }}\r\n              borderRadius=\"-10px\"\r\n              _hover={{\r\n                bgColor: \"green.200\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              <FiTrash2 style={{ marginRight: \"5px\" }} />\r\n              delete\r\n            </Button>\r\n          )}\r\n          <Button\r\n            onClick={() => goToThread()}\r\n            bgColor=\"whiteAlpha.600\"\r\n            maxWidth={{\r\n              base: \"120px\",\r\n              md: \"180px\",\r\n            }}\r\n            fontSize={{\r\n              base: \"10px\",\r\n              md: \"1rem\",\r\n            }}\r\n            height={{\r\n              base: \"25px\",\r\n              md: \"40px\",\r\n            }}\r\n            borderRadius=\"-10px\"\r\n            marginLeft=\"4px\"\r\n            p={{\r\n              base: \"0.4rem\",\r\n              md: \"1rem\",\r\n            }}\r\n            _hover={{\r\n              bgColor: \"green.200\",\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            go to thread\r\n            <BiRightArrowAlt style={{ marginLeft: \"5px\" }} />\r\n          </Button>\r\n        </Flex>\r\n      )}\r\n      {username && (\r\n        <>\r\n          <InteractionsSection repliesCount={repliesCount!} />\r\n          <Heading\r\n            pos=\"absolute\"\r\n            right=\"20px\"\r\n            color=\"gray.400\"\r\n            fontSize={[\"8px\", \"8px\", \"10px\", \"12px\"]}\r\n          >\r\n            {createdAt !== null && createdAt?.substr(0, 10)}\r\n          </Heading>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n",["206","207"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts",[],["208","209"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx",[],["210","211"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx",["212","213"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ListThreadsQuery,\r\n  ListUserThreadsQuery,\r\n  useCreateThreadMutation,\r\n  useGetUserThreadsNumberLazyQuery,\r\n  useIsUserLoggedInLazyQuery,\r\n} from \"../generated/graphql\";\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  FormLabel,\r\n  Heading,\r\n  Input,\r\n  Select,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { topicsQuery } from \"../pages/Topics\";\r\nimport { useGetUserThreads } from \"../hooks/useGetUserThreads\";\r\n\r\ninterface QuestionFormProps {\r\n  setShowModal?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  clickedFromProfilePage?: boolean /* if this prop is passed from profile page */;\r\n  refetchFromHome?: () => Promise<ApolloQueryResult<ListThreadsQuery>>;\r\n  refetchProfileThreads?: () => Promise<ApolloQueryResult<ListUserThreadsQuery>>;\r\n}\r\nexport const QuestionForm: React.FC<QuestionFormProps> = ({\r\n  refetchFromHome,\r\n  clickedFromProfilePage,\r\n  setShowModal,\r\n  refetchProfileThreads,\r\n}) => {\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [specilization, setSpecilization] = useState(\"\");\r\n  const topics = useQuery(topicsQuery);\r\n  const [topicsArr, setTopicsArr] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTopicsArr(topics.data && topics.data.listTopics);\r\n  }, [topics.data]);\r\n\r\n  const [createQuestion] = useCreateThreadMutation({});\r\n  const [userLogginData, { data }] = useIsUserLoggedInLazyQuery();\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      userLogginData();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const submitQuestion = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      await createQuestion({\r\n        variables: {\r\n          question,\r\n          spec: specilization,\r\n        },\r\n      });\r\n\r\n      if (refetchProfileThreads) {\r\n        setShowModal!(false);\r\n        // refetchProfileThreads()\r\n        setTimeout(() => window.location.reload(), 400);  \r\n      }\r\n      \r\n      else if (refetchFromHome) {\r\n        refetchFromHome();\r\n        setQuestion(\"\");\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.log(error.messge);\r\n    }\r\n  };\r\n  return (\r\n    <Box>\r\n      <Heading\r\n        fontSize={{ base: \"14px\", md: \"1.5rem\" }}\r\n        textAlign=\"center\"\r\n        textColor=\"gray.400\"\r\n        marginBottom={{ base: \"6px\", md: \"1rem\" }}\r\n      >\r\n        Create Thread\r\n        <Divider marginTop=\"8px\" />\r\n      </Heading>\r\n\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        p={{\r\n          base: \"1rem\",\r\n          md: \"1.5rem\",\r\n        }}\r\n        my={{\r\n          base: \"5px\",\r\n          md: \"10px\",\r\n        }}\r\n        boxShadow={clickedFromProfilePage ? \"\" : \"lg\"}\r\n        textAlign=\"center\"\r\n      >\r\n        <form onSubmit={(e) => submitQuestion(e)}>\r\n          <FormControl isRequired fontWeight=\"bold\">\r\n            <FormLabel\r\n              color=\"green.400\"\r\n              fontSize={{ base: \"0.7rem\", md: \"1rem\" }}\r\n            >\r\n              {\" \"}\r\n              question\r\n            </FormLabel>\r\n            <Input\r\n              fontSize={{ base: \"0.7rem\", md: \"1rem\" }}\r\n              borderRadius=\"-10px\"\r\n              padding={{ base: \"0.4rem\", md: \"1rem\" }}\r\n              type=\"text\"\r\n              value={question}\r\n              onChange={(e) => setQuestion(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl isRequired fontWeight=\"bold\">\r\n            <FormLabel\r\n              color=\"green.400\"\r\n              fontSize={{ base: \"0.7rem\", md: \"1rem\" }}\r\n            >\r\n              specilization\r\n            </FormLabel>\r\n            <Select\r\n              onChange={(e) => setSpecilization(e.target.value)}\r\n              fontSize=\"12px\"\r\n              defaultValue={\"disabled\"}\r\n              name=\"topic\"\r\n              variant=\"flushed\"\r\n            >\r\n              <option value=\"disabled\" disabled>\r\n                choose a topic\r\n              </option>\r\n              {topicsArr &&\r\n                topicsArr.map((topic, idx) => (\r\n                  <option key={idx} value={topic}>\r\n                    {topic}\r\n                  </option>\r\n                ))}\r\n            </Select>\r\n          </FormControl>\r\n          <Button\r\n            isDisabled={!data?.isUserLoggedIn}\r\n            type=\"submit\"\r\n            borderRadius=\"-20px\"\r\n            marginTop={{\r\n              base: \"8px\",\r\n              md: \"12px\",\r\n            }}\r\n            marginX=\"auto\"\r\n            fontSize={{\r\n              base: \"10px\",\r\n              md: \"1rem\",\r\n            }}\r\n          >\r\n            submit\r\n          </Button>\r\n        </form>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx",["214"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState, useLayoutEffect } from \"react\";\r\nimport { Box, Button, Flex, useDisclosure } from \"@chakra-ui/react\";\r\n\r\n// import InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\nimport {\r\n  useGetUserThreadsNumberLazyQuery,\r\n  useListUserThreadsLazyQuery,\r\n} from \"../generated/graphql\";\r\n\r\nimport { ProfileModal } from \"../components/ProfileModal\";\r\nimport { HeaderComp } from \"../smallComps/HeaderComp\";\r\nimport { SettingsSection } from \"../smallComps/SettingsSections\";\r\nimport { getAccessToken } from \"../accessToken\";\r\nimport { LoadingSkeleton } from \"../smallComps/LoadingSkeleton\";\r\n\r\ninterface SideBtnProps {\r\n  text: string;\r\n  onClick: () => any;\r\n}\r\nexport const SideBtn: React.FC<SideBtnProps> = ({ onClick, text }) => {\r\n  return (\r\n    <Box\r\n      as=\"button\"\r\n      boxShadow=\"inner\"\r\n      marginTop={text !== \"New Thread\" ? \"0.5rem\" : \"\"}\r\n      p={[\"0.4rem\", \"0.5rem\", \"0.8rem\", \"1.2rem\"]}\r\n      onClick={onClick}\r\n      textAlign=\"center\"\r\n      bgColor=\"green.300\"\r\n      color=\"Window\"\r\n      fontSize={{\r\n        base: text === \"New Thread\" ? \"0.7rem\" : \"0.9rem\",\r\n        md: \"1.4rem\",\r\n      }}\r\n      borderRadius=\"-10px\"\r\n      fontWeight=\"bold\"\r\n      cursor=\"pointer\"\r\n      _hover={{\r\n        bgColor: \"green.500\",\r\n      }}\r\n    >\r\n      {text}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const Profile = () => {\r\n  const QuerySize = React.useRef(3);\r\n  const [displayedSection, setDisplpayedSection] = useState(\"Dashboard\");\r\n  useEffect(() => setSectionHeader(displayedSection), [displayedSection]);\r\n\r\n  const [sectionHeader, setSectionHeader] = useState(\"Dashboard\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showThreadOptions, setShowThreadOptions] = useState(false);\r\n  const [hideLoadMoreBtn, setHideLoadMoreBtn] = useState(false);\r\n\r\n  const [getUserThreadsNum, userThreadsNumOptions] =\r\n    useGetUserThreadsNumberLazyQuery({\r\n      fetchPolicy: \"network-only\",\r\n    });\r\n\r\n  const [listUserQuery, { data, loading, fetchMore, refetch }] =\r\n    useListUserThreadsLazyQuery({\r\n      fetchPolicy: \"network-only\",\r\n      variables: {\r\n        offset: 0,\r\n        limit: QuerySize.current,\r\n      },\r\n      onCompleted: () => {},\r\n    });\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      getUserThreadsNum();\r\n      listUserQuery();\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const fetchedThreadsCount = data?.listUserThreads?.length;\r\n      const userThreadsNum = userThreadsNumOptions.data?.getUserThreadsNumber;\r\n      if (fetchedThreadsCount === userThreadsNum) {\r\n        setHideLoadMoreBtn(true);\r\n      }\r\n    }\r\n  }, [data?.listUserThreads]);\r\n\r\n  // if the \"profile\" path was typed in the address\r\n  useLayoutEffect(() => {\r\n    const token = getAccessToken();\r\n    if (token === \"\") {\r\n      document.location.assign(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  const { onClose } = useDisclosure({ onClose: () => setShowModal(false) });\r\n\r\n  const loadMore = () => {\r\n    const fetchedThreadsCount = data?.listUserThreads?.length;\r\n    fetchMore!({\r\n      variables: {\r\n        offset: fetchedThreadsCount,\r\n        limit: QuerySize.current,\r\n      },\r\n    });\r\n  };\r\n\r\n  let ThreadSection: any = null;\r\n  if (loading) {\r\n    ThreadSection = <LoadingSkeleton num={3} />;\r\n  } else if (data) {\r\n    ThreadSection = (\r\n      <>\r\n        {data.listUserThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              threadId={thread.id}\r\n              question={thread.question}\r\n              createdAt={thread.createdAt}\r\n              specializtion={thread.specialization}\r\n              showThreadOptions={showThreadOptions}\r\n              setShowThreadOptions={setShowThreadOptions}\r\n            />\r\n          );\r\n        })}\r\n\r\n        <Flex justify=\"center\" p=\"1rem\" marginTop=\"0.2rem\">\r\n          {hideLoadMoreBtn === false && (\r\n            <Button\r\n              onClick={() => loadMore()}\r\n              p=\"1rem\"\r\n              fontWeight=\"semibold\"\r\n              bg=\"green.300\"\r\n              color=\"white\"\r\n              borderRadius=\"-20px\"\r\n            >\r\n              Load More\r\n            </Button>\r\n          )}\r\n        </Flex>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ProfileModal\r\n        refetchProfileThreads={refetch}\r\n        setShowModal={setShowModal}\r\n        showModal={showModal}\r\n        onClose={onClose}\r\n      />\r\n      <HeaderComp header={sectionHeader!} />\r\n      <Flex marginTop=\"1rem\">\r\n        {displayedSection === \"Dashboard\" ? (\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            flex=\"5\"\r\n            minH=\"80vh\"\r\n            shadow=\"base\"\r\n            p={[\"0.2rem\", \"0.4rem\", \"1rem\", \"1rem\"]}\r\n          >\r\n            {ThreadSection}\r\n          </Flex>\r\n        ) : (\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            flex=\"5\"\r\n            minH=\"80vh\"\r\n            shadow=\"base\"\r\n            p={[\"0.2rem\", \"0.4rem\", \"1rem\", \"1rem\"]}\r\n          >\r\n            <SettingsSection />\r\n          </Flex>\r\n        )}\r\n\r\n        <Flex\r\n          flex=\"1\"\r\n          flexDirection=\"column\"\r\n          p={{ base: \"0.4rem\", md: \"2rem\" }}\r\n        >\r\n          <SideBtn text=\"New Thread\" onClick={() => setShowModal(true)} />\r\n          <SideBtn\r\n            text=\"Dashboard\"\r\n            onClick={() => setDisplpayedSection(\"Dashboard\")}\r\n          />\r\n          <SideBtn\r\n            text=\"settings\"\r\n            onClick={() => setDisplpayedSection(\"Settings\")}\r\n          />\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n",["215","216"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx",[],["217","218"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx",[],["219","220"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx",["221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { setAccessToken } from '../accessToken'\r\nimport { Message } from '../components/Message'\r\nimport { IsUserLoggedInDocument, IsUserLoggedInQuery, MeDocument, MeQuery, useIsUserLoggedInQuery, useLoginMutation } from '../generated/graphql'\r\nimport { ApolloError } from \"@apollo/client/errors\"\r\n\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showMessage, setShowMessage] = useState({\r\n        show: false,\r\n        value: \"\"\r\n    })\r\n    const [login, { data, client }] = useLoginMutation()\r\n\r\n    const loginUser = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault()\r\n        try {\r\n\r\n            const response = await login({\r\n                variables: {\r\n                    username,\r\n                    password\r\n                },\r\n                update: (cache, { data }) => {\r\n                    if (!data) {\r\n                        return null;\r\n                    }\r\n                    // cache.writeQuery<MeQuery>({\r\n                    //     query: MeDocument,\r\n                    //     data: {\r\n                    //         me: data.loginUser?.user\r\n                    //     }\r\n                    // })\r\n                    // cache.writeQuery<IsUserLoggedInQuery>({\r\n                    //     query: IsUserLoggedInDocument,\r\n                    //     data: {\r\n                    //         isUserLoggedIn: true\r\n                    //     }\r\n                    // })\r\n\r\n                },\r\n            })\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.loginUser?.accessToken!)\r\n                history.push(\"/\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch (error: any) {\r\n            setShowMessage({ show: true, value: error.message })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"login-form\">\r\n                {showMessage.show && (\r\n                    <Message message={showMessage.value} />\r\n                )}\r\n                <label htmlFor=\"username\">username: </label>\r\n                <input id=\"username\" type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <label htmlFor=\"password\">password: </label>\r\n                <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                <button onClick={e => loginUser(e)}>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx",[],["234","235"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Thread.tsx",["236"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\accessToken.ts",["237"],"import jwtDecode from \"jwt-decode\"\r\n\r\nexport const getAccessToken = () => {\r\n    return localStorage.getItem(\"accessToken\")\r\n}\r\n\r\nexport const setAccessToken = (token: string) => {\r\n    localStorage.setItem(\"accessToken\", token)\r\n}",["238","239"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\RegisterForm.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ThreadSortingBtns.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LikeSection.tsx",[],["240","241"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\TopicBox.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\AddReplyModal.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LogoutBtn.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\NotificationBtn.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\ProfileBtn.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\User.tsx",["242"],"import { Flex } from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useListOtherUserThreadsLazyQuery } from \"../generated/graphql\";\r\nimport { QuestionBox } from \"../smallComps/QuestionBox\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\n\r\ninterface UserProps {}\r\n\r\nexport const User: React.FC<UserProps> = () => {\r\n  const params: { username: string } = useParams();\r\n  const [listOtherThreads, { loading, data }] =\r\n    useListOtherUserThreadsLazyQuery({\r\n      fetchPolicy: \"cache-and-network\",\r\n      variables: {\r\n        username: params.username,\r\n      },\r\n    });\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    isMounted && listOtherThreads();\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, []);\r\n\r\n  let ThreadSection: any = null;\r\n  if (loading) {\r\n    ThreadSection = <FastBigSpinner />;\r\n  } else if (data) {\r\n    ThreadSection = (\r\n      <>\r\n        {data.listOtherUserThreads?.map((thread, idx) => {\r\n          return (\r\n            <QuestionBox\r\n              key={idx}\r\n              threadId={thread.id}\r\n              question={thread.question}\r\n              createdAt={thread.createdAt}\r\n              specializtion={thread.specialization}\r\n              fromUserPage={true}\r\n            />\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n      marginTop=\"3rem\"\r\n      marginX=\"0.4rem\"\r\n      p=\"1.5rem\"\r\n      boxShadow=\"lg\"\r\n      direction=\"column\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n    >\r\n      {ThreadSection}\r\n    </Flex>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\hooks\\usePagintation.tsx",["243"],"import { useMemo, useState } from \"react\";\r\n\r\nexport const DOTS = \"...\";\r\n\r\nconst range = (start: number, end: number) => {\r\n  const length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\ntype usePaginationProps = {\r\n  pageSize: number;\r\n  currentPage: number;\r\n  totalCount: number;\r\n  siblingCount?: number;\r\n};\r\n\r\nexport const usePagination = ({\r\n  currentPage,\r\n  pageSize,\r\n  totalCount,\r\n  siblingCount = 1,\r\n}: usePaginationProps) => {\r\n  \r\n  function returnPaginationShape() {\r\n    const totalPageCount = Math.ceil(totalCount / pageSize);\r\n    const totalPageNumbers = siblingCount + 5;\r\n\r\n    // let outputRange: any;\r\n\r\n    if (totalPageNumbers >= totalPageCount) {\r\n      return range(1, totalPageCount);\r\n      // outputRange = range(1, totalPageCount);\r\n    }\r\n\r\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n    const rightSiblingIndex = Math.min(\r\n      currentPage + siblingCount,\r\n      totalPageCount\r\n    );\r\n\r\n    const shouldShowLeftDots = leftSiblingIndex > 2;\r\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n    const firstPageIndex = 1;\r\n    const lastPageIndex = totalPageCount;\r\n\r\n    if (!shouldShowLeftDots && shouldShowRightDots) {\r\n      let leftItemCount = 3 + 2 * siblingCount;\r\n      let leftRange = range(1, leftItemCount);\r\n\r\n      return [...leftRange, DOTS, totalPageCount];\r\n      // outputRange =  [...leftRange, DOTS, totalPageCount];\r\n    }\r\n\r\n    if (shouldShowLeftDots && !shouldShowRightDots) {\r\n      let rightItemCount = 3 + 2 * siblingCount;\r\n      let rightRange = range(\r\n        totalPageCount - rightItemCount + 1,\r\n        totalPageCount\r\n      );\r\n\r\n      return [firstPageIndex, DOTS, ...rightRange];\r\n      // outputRange =  [firstPageIndex, DOTS, ...rightRange];\r\n    }\r\n\r\n    if (shouldShowLeftDots && shouldShowRightDots) {\r\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n\r\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n      // outputRange =  [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n    }\r\n\r\n    // return outputRange\r\n  }\r\n\r\n  const paginationRange = useMemo(returnPaginationShape, [\r\n    totalCount,\r\n    pageSize,\r\n    siblingCount,\r\n    currentPage,\r\n  ]);\r\n\r\n  return paginationRange;\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\PagintationSection.tsx",["244"],"import React, { useEffect, useState, useLayoutEffect } from \"react\";\r\nimport { Box, Button, Center } from \"@chakra-ui/react\";\r\nimport { usePagination, DOTS } from \"../hooks/usePagintation\";\r\nimport { BsThreeDots } from \"react-icons/bs\";\r\n\r\ntype PagintationProps = {\r\n  currentPage: number;\r\n  onPageChange: (value: number) => any;\r\n  totalCount: number;\r\n  pageSize: number;\r\n  siblingCount?: number;\r\n};\r\n\r\nexport const Pagination = (props: PagintationProps) => {\r\n  const { onPageChange, totalCount, siblingCount, currentPage, pageSize } =\r\n    props;\r\n  const [showNumberedSection, setShowNumberedSection] = useState(() => {\r\n    if (window.innerWidth < 800)  return false;\r\n    if (window.innerWidth > 800)  return true;\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    const setterFunc = () => {\r\n      if (window.innerWidth < 800) {\r\n        setShowNumberedSection(false)\r\n      } else {\r\n        setShowNumberedSection(true)\r\n      }\r\n    };\r\n    window.addEventListener(\"resize\", setterFunc);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", setterFunc);\r\n    };\r\n  }, []);\r\n\r\n  const paginationRange = usePagination({\r\n    currentPage,\r\n    totalCount,\r\n    siblingCount,\r\n    pageSize,\r\n  })!;\r\n\r\n  let firstPage = 1;\r\n  let lastPage = paginationRange &&  paginationRange[paginationRange.length - 1];\r\n  \r\n\r\n  if (currentPage === 0 || (paginationRange && paginationRange.length < 2)) {\r\n    return <div></div>;\r\n    // return null;\r\n  }\r\n\r\n  return (\r\n    <Box display=\"flex\" marginTop=\"10px\" width=\"auto\">\r\n      <Button\r\n        borderRadius=\"-15px\"\r\n        bg=\"green.300\"\r\n        marginX=\"2px\"\r\n        color=\"white\"\r\n        isDisabled={currentPage === firstPage}\r\n        onClick={() => onPageChange(currentPage - 1)}\r\n      >\r\n        previous\r\n      </Button>\r\n\r\n      {showNumberedSection === true &&\r\n        paginationRange &&\r\n        paginationRange.map((pageNumber: any, idx: number) => {\r\n          if (pageNumber === DOTS)\r\n            return (\r\n              <Center key={idx}>\r\n                <BsThreeDots size=\"15\" />\r\n              </Center>\r\n            );\r\n\r\n          return (\r\n            <Button\r\n              key={idx}\r\n              borderRadius=\"-20px\"\r\n              bg={pageNumber === currentPage ? \"green.900\" : \"green.400\"}\r\n              color=\"white\"\r\n              fontSize=\"1rem\"\r\n              marginX=\"2px\"\r\n              onClick={() => onPageChange(pageNumber as number)}\r\n            >\r\n              {pageNumber}\r\n            </Button>\r\n          );\r\n        })}\r\n      <Button\r\n        borderRadius=\"-15px\"\r\n        bg=\"green.300\"\r\n        color=\"white\"\r\n        marginX=\"2px\"\r\n        isDisabled={currentPage >= lastPage}\r\n        onClick={() => onPageChange(currentPage + 1)}\r\n      >\r\n        next\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SideNavSection.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\SettingsSections.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\hooks\\useGetUserThreads.tsx",["245"],"import React, { useEffect, useState } from \"react\";\r\n\r\ntype UseGetUserThreadsProps = {\r\n  subData?: any\r\n}\r\nexport const useGetUserThreads = ( { subData }: UseGetUserThreadsProps ) => {\r\n  const [threads, setThreads] = useState<{\r\n    count: number;\r\n    threads: [];\r\n  }>({ count: 0, threads: [] });\r\n\r\n  useEffect(() => { \r\n    const getData = async () => {\r\n      const url = \"http://localhost:8000/get_user_threads\";\r\n      const data = await fetch(url, {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n        cache: \"no-cache\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      const json = data.ok && await data.json();\r\n      setThreads(json);\r\n    };\r\n    getData();\r\n\r\n  }, [subData]);\r\n\r\n  return threads?.threads && threads;\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Notifications.tsx",["246","247"],"/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport { Flex, Center, Button } from \"@chakra-ui/react\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { HeaderComp } from \"../smallComps/HeaderComp\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { FastBigSpinner } from \"../smallComps/Spinners\";\r\n\r\ninterface NotifItemProps {\r\n  handleClick: () => any;\r\n  val: string;\r\n}\r\nexport const NotifItem: React.FC<NotifItemProps> = ({ handleClick, val }) => {\r\n  return (\r\n    <>\r\n      <Flex\r\n        p=\"1.5rem\"\r\n        borderRadius=\"-20px\"\r\n        bgColor=\"gray.100\"\r\n        shadow=\"lg\"\r\n        fontSize=\"medium\"\r\n        fontWeight=\"bold\"\r\n        color=\"#335344\"\r\n        borderLeft=\"12px solid #518096\"\r\n        borderLeftRadius=\"4px\"\r\n        _hover={{\r\n          bgColor: \"gray.200\",\r\n        }}\r\n        my=\"0.4rem\"\r\n        pos=\"relative\"\r\n      >\r\n        {val}\r\n        {/* <Button bgColor=\"blue.300\" pos=\"absolute\" right=\"4px\" top=\"2px\" onClick={handleClick}>delete</Button> */}\r\n      </Flex>\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nconst createDummieData = () => {\r\n  const someWord = (num: any) => `${num}+${num}+${num}+${num}+${num}`;\r\n  return Array.from({ length: 200 }, (_, idx) => someWord(idx));\r\n};\r\n\r\ninterface NotificationsProps {}\r\n\r\nexport const Notifications: React.FC<NotificationsProps> = () => {\r\n  const params: { userId: string } = useParams();\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [notifs, setNotifs] = useState<string[]>([]);\r\n  const [offset, setOffset] = useState(0);\r\n\r\n  const [end, setEnd] = useState(15);\r\n  useEffect(() => {\r\n    setUserId(params.userId);\r\n  }, [params.userId]);\r\n\r\n  useEffect(() => {\r\n    const dummieData = createDummieData();\r\n    const slicedSection = dummieData.slice(offset, end);\r\n    setNotifs(slicedSection);\r\n  }, [end, offset]);\r\n\r\n  const handleLoadMore = () => {\r\n    console.log(offset, end);\r\n    setTimeout(() => {\r\n      offset > 0 && setOffset(end);\r\n      end < 200 && setEnd((prevEnd) => prevEnd + 10);\r\n    }, 1000);\r\n\r\n    // const hiddenDiv = document.getElementById(\"hidden\")\r\n    // hiddenDiv!.scrollIntoView({\r\n    //   behavior: \"smooth\"\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <HeaderComp header={\"Notifications\"} />\r\n      <Flex marginTop=\"1.5rem\">\r\n        <Flex\r\n          flexDirection=\"column\"\r\n          flex=\"5\"\r\n          minH=\"80vh\"\r\n          p={[\"0.2rem\", \"0.4rem\", \"1rem\", \"1rem\"]}\r\n        >\r\n          <InfiniteScroll\r\n            hasMore={notifs.length < 200}\r\n            loadMore={handleLoadMore}\r\n            pageStart={0}\r\n            // useWindow={false}\r\n            loader={\r\n              <Center key={0}>\r\n                <FastBigSpinner />\r\n              </Center>\r\n            }\r\n          >\r\n            {notifs.map((val, index: number) => (\r\n              <NotifItem\r\n                key={index}\r\n                val={val}\r\n                handleClick={() => {\r\n                  console.log(\"current item index is: \", index);\r\n                  let x = notifs.filter((_, idx) => index !== idx);\r\n                  console.log(x.length);\r\n\r\n                  setNotifs(x);\r\n                }}\r\n              />\r\n            ))}\r\n          </InfiniteScroll>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LoadingSkeleton.tsx",[],{"ruleId":"248","severity":1,"message":"249","line":20,"column":9,"nodeType":"250","messageId":"251","endLine":20,"endColumn":17},{"ruleId":"248","severity":1,"message":"252","line":30,"column":59,"nodeType":"250","messageId":"251","endLine":30,"endColumn":68},{"ruleId":"248","severity":1,"message":"253","line":8,"column":3,"nodeType":"250","messageId":"251","endLine":8,"endColumn":23},{"ruleId":"248","severity":1,"message":"254","line":10,"column":3,"nodeType":"250","messageId":"251","endLine":10,"endColumn":30},{"ruleId":"248","severity":1,"message":"255","line":12,"column":10,"nodeType":"250","messageId":"251","endLine":12,"endColumn":27},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"256","replacedBy":"260"},{"ruleId":"258","replacedBy":"261"},{"ruleId":"256","replacedBy":"262"},{"ruleId":"258","replacedBy":"263"},{"ruleId":"248","severity":1,"message":"264","line":7,"column":3,"nodeType":"250","messageId":"251","endLine":7,"endColumn":35},{"ruleId":"248","severity":1,"message":"265","line":24,"column":10,"nodeType":"250","messageId":"251","endLine":24,"endColumn":27},{"ruleId":"248","severity":1,"message":"266","line":8,"column":10,"nodeType":"250","messageId":"251","endLine":8,"endColumn":24},{"ruleId":"256","replacedBy":"267"},{"ruleId":"258","replacedBy":"268"},{"ruleId":"256","replacedBy":"269"},{"ruleId":"258","replacedBy":"270"},{"ruleId":"256","replacedBy":"271"},{"ruleId":"258","replacedBy":"272"},{"ruleId":"248","severity":1,"message":"273","line":1,"column":27,"nodeType":"250","messageId":"251","endLine":1,"endColumn":36},{"ruleId":"248","severity":1,"message":"274","line":1,"column":38,"nodeType":"250","messageId":"251","endLine":1,"endColumn":45},{"ruleId":"248","severity":1,"message":"275","line":1,"column":47,"nodeType":"250","messageId":"251","endLine":1,"endColumn":58},{"ruleId":"248","severity":1,"message":"276","line":5,"column":10,"nodeType":"250","messageId":"251","endLine":5,"endColumn":32},{"ruleId":"248","severity":1,"message":"277","line":5,"column":34,"nodeType":"250","messageId":"251","endLine":5,"endColumn":53},{"ruleId":"248","severity":1,"message":"278","line":5,"column":55,"nodeType":"250","messageId":"251","endLine":5,"endColumn":65},{"ruleId":"248","severity":1,"message":"279","line":5,"column":67,"nodeType":"250","messageId":"251","endLine":5,"endColumn":74},{"ruleId":"248","severity":1,"message":"280","line":5,"column":76,"nodeType":"250","messageId":"251","endLine":5,"endColumn":98},{"ruleId":"248","severity":1,"message":"281","line":6,"column":10,"nodeType":"250","messageId":"251","endLine":6,"endColumn":21},{"ruleId":"248","severity":1,"message":"282","line":12,"column":12,"nodeType":"250","messageId":"251","endLine":12,"endColumn":17},{"ruleId":"248","severity":1,"message":"283","line":12,"column":19,"nodeType":"250","messageId":"251","endLine":12,"endColumn":27},{"ruleId":"248","severity":1,"message":"284","line":18,"column":21,"nodeType":"250","messageId":"251","endLine":18,"endColumn":25},{"ruleId":"248","severity":1,"message":"285","line":18,"column":27,"nodeType":"250","messageId":"251","endLine":18,"endColumn":33},{"ruleId":"256","replacedBy":"286"},{"ruleId":"258","replacedBy":"287"},{"ruleId":"248","severity":1,"message":"288","line":6,"column":3,"nodeType":"250","messageId":"251","endLine":6,"endColumn":10},{"ruleId":"248","severity":1,"message":"289","line":1,"column":8,"nodeType":"250","messageId":"251","endLine":1,"endColumn":17},{"ruleId":"256","replacedBy":"290"},{"ruleId":"258","replacedBy":"291"},{"ruleId":"256","replacedBy":"292"},{"ruleId":"258","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":26,"column":6,"nodeType":"296","endLine":26,"endColumn":8,"suggestions":"297"},{"ruleId":"248","severity":1,"message":"298","line":1,"column":19,"nodeType":"250","messageId":"251","endLine":1,"endColumn":27},{"ruleId":"248","severity":1,"message":"273","line":1,"column":17,"nodeType":"250","messageId":"251","endLine":1,"endColumn":26},{"ruleId":"248","severity":1,"message":"299","line":1,"column":8,"nodeType":"250","messageId":"251","endLine":1,"endColumn":13},{"ruleId":"248","severity":1,"message":"300","line":3,"column":24,"nodeType":"250","messageId":"251","endLine":3,"endColumn":30},{"ruleId":"248","severity":1,"message":"301","line":51,"column":10,"nodeType":"250","messageId":"251","endLine":51,"endColumn":16},"@typescript-eslint/no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","'fetchMore' is assigned a value but never used.","'ListUserThreadsQuery' is defined but never used.","'useListUserThreadsLazyQuery' is defined but never used.","'ApolloQueryResult' is defined but never used.","no-native-reassign",["302"],"no-negated-in-lhs",["303"],["302"],["303"],["302"],["303"],"'useGetUserThreadsNumberLazyQuery' is defined but never used.","'useGetUserThreads' is defined but never used.","'FastBigSpinner' is defined but never used.",["302"],["303"],["302"],["303"],["302"],["303"],"'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'useIsUserLoggedInQuery' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'data' is assigned a value but never used.","'client' is assigned a value but never used.",["302"],["303"],"'Divider' is defined but never used.","'jwtDecode' is defined but never used.",["302"],["303"],["302"],["303"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'listOtherThreads'. Either include it or remove the dependency array.","ArrayExpression",["304"],"'useState' is defined but never used.","'React' is defined but never used.","'Button' is defined but never used.","'userId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"305","fix":"306"},"Update the dependencies array to be: [listOtherThreads]",{"range":"307","text":"308"},[805,807],"[listOtherThreads]"]