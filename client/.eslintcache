[{"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx":"1","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx":"2","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts":"3","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx":"4","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx":"5","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx":"6","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx":"7","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx":"8","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx":"9","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx":"10","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx":"11","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx":"12","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx":"13","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx":"14","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx":"15","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx":"16","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx":"17","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx":"18","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx":"19","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx":"20","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx":"21","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx":"22","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx":"23","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx":"24","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx":"25","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx":"26","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx":"27"},{"size":2886,"mtime":1627276923302,"results":"28","hashOfConfig":"29"},{"size":3838,"mtime":1627274503972,"results":"30","hashOfConfig":"29"},{"size":425,"mtime":1607784182783,"results":"31","hashOfConfig":"29"},{"size":2611,"mtime":1627275377137,"results":"32","hashOfConfig":"29"},{"size":26085,"mtime":1627078596809,"results":"33","hashOfConfig":"29"},{"size":4393,"mtime":1627276804623,"results":"34","hashOfConfig":"29"},{"size":1957,"mtime":1627163448967,"results":"35","hashOfConfig":"29"},{"size":2926,"mtime":1627275429954,"results":"36","hashOfConfig":"29"},{"size":1341,"mtime":1627089325956,"results":"37","hashOfConfig":"29"},{"size":3470,"mtime":1626530353730,"results":"38","hashOfConfig":"29"},{"size":244,"mtime":1626435092133,"results":"39","hashOfConfig":"29"},{"size":4591,"mtime":1627275769200,"results":"40","hashOfConfig":"29"},{"size":327,"mtime":1627264169528,"results":"41","hashOfConfig":"29"},{"size":885,"mtime":1627073131241,"results":"42","hashOfConfig":"29"},{"size":426,"mtime":1626443446668,"results":"43","hashOfConfig":"29"},{"size":382,"mtime":1626377368932,"results":"44","hashOfConfig":"29"},{"size":1505,"mtime":1627261122230,"results":"45","hashOfConfig":"29"},{"size":743,"mtime":1627277099804,"results":"46","hashOfConfig":"29"},{"size":1661,"mtime":1627078858743,"results":"47","hashOfConfig":"29"},{"size":3681,"mtime":1627276603879,"results":"48","hashOfConfig":"29"},{"size":647,"mtime":1627079266812,"results":"49","hashOfConfig":"29"},{"size":2848,"mtime":1627078808958,"results":"50","hashOfConfig":"29"},{"size":2645,"mtime":1627163200416,"results":"51","hashOfConfig":"29"},{"size":246,"mtime":1625721792159,"results":"52","hashOfConfig":"29"},{"size":1192,"mtime":1627160280436,"results":"53","hashOfConfig":"29"},{"size":690,"mtime":1627265277928,"results":"54","hashOfConfig":"29"},{"size":736,"mtime":1627274854190,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11skg4y",{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"67"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\SignleTopicPage.tsx",["118"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionBox.tsx",["119"],"import React from \"react\";\r\n\r\nimport { Box, Heading, Badge, Tooltip } from \"@chakra-ui/react\";\r\n\r\nimport { FiUser } from \"react-icons/fi\";\r\nimport { BiDotsHorizontal } from \"react-icons/bi\";\r\nimport { ListUserThreadsQuery } from \"../generated/graphql\";\r\nimport { ApolloQueryResult } from \"@apollo/client\";\r\nimport { OptionsPopover } from \"../smallComps/OptionsPopover\";\r\nimport { InteractionsSection } from \"../smallComps/InteractionsSection\";\r\n\r\ninterface QuestionBoxProps {\r\n  threadId?: number;\r\n  username?: string;\r\n  question: string;\r\n  specializtion?: string;\r\n  createdAt?: string;\r\n  repliesCount?: number;\r\n  showThreadOptions?: boolean;\r\n  fromTopicPage?: boolean;\r\n  setShowThreadOptions?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  refetchProfileThreads?: () => Promise<\r\n    ApolloQueryResult<ListUserThreadsQuery>\r\n  >;\r\n}\r\nexport const QuestionBox: React.FC<QuestionBoxProps> = ({\r\n  threadId,\r\n  question,\r\n  username,\r\n  createdAt,\r\n  repliesCount,\r\n  specializtion,\r\n  showThreadOptions,\r\n  fromTopicPage,\r\n  setShowThreadOptions,\r\n  refetchProfileThreads,\r\n}) => {\r\n  // const currentUser = useMeQuery();\r\n\r\n  return (\r\n    <Box\r\n      pos=\"relative\"\r\n      width=\"100%\"\r\n      p={username ? \"0.8rem\" : \"0.6rem\"}\r\n      my=\"5px\"\r\n      shadow={username ? \"md\" : \"sm\"}\r\n      bgColor=\"gray.200\"\r\n      _hover={{\r\n        bgColor: \"gray.400\",\r\n        borderRadius: \"-30px\",\r\n      }}\r\n      borderRadius=\"-20px\"\r\n      \r\n    >\r\n      {username && (\r\n        <Heading size=\"6px\" color=\"gray.400\" display=\"flex\" alignItems=\"center\">\r\n          <FiUser />\r\n          <Box ml=\"4px\">{username}</Box>\r\n        </Heading>\r\n      )}\r\n      <Heading\r\n        // as=\"h3\"\r\n        boxShadow=\"sm\"\r\n        size=\"md\"\r\n        my=\"5px\"\r\n        marginLeft={[\"0.1rem\", \"0.4rem\", \"1rem\", \"2rem\"]}\r\n        p={[\"2px\", \"2px\",\"10px\", \"10px\"]}\r\n        pos=\"relative\"\r\n        cursor=\"pointer\"\r\n        color=\"blackAlpha.700\"\r\n        // maxW={{\r\n        //   base: \"180px\",\r\n        //   \"lg\": \"auto\"\r\n        // }}\r\n        textOverflow='ellipsis'\r\n        fontSize={[\"10px\", \"16px\", \"large\", \"xl\"]}\r\n        _hover={{\r\n          color: \"green.600\",\r\n        }}\r\n      >\r\n        {question}\r\n        {!fromTopicPage && (\r\n          <Badge\r\n            variant=\"subtle\"\r\n            colorScheme=\"green\"\r\n            pos=\"absolute\"\r\n            p=\"0.1rem\"\r\n            right=\"2px\"\r\n            top={username ? \"0.1rem\" : \"1.2rem\"}\r\n            fontSize={[\"0.5rem\", \"0.5rem\", \"0.5rem\",\"0.7rem\"]}\r\n            opacity=\"0.7\"\r\n          >\r\n            {specializtion}\r\n          </Badge>\r\n        )}\r\n      </Heading>\r\n      {!username &&(\r\n        <OptionsPopover\r\n          showThreadOptions={showThreadOptions}\r\n          setShowThreadOptions={setShowThreadOptions!}\r\n          refetch={refetchProfileThreads!}\r\n          threadId={threadId!}\r\n        >\r\n          <Box\r\n            as=\"button\"\r\n            onClick={() => {\r\n              if (setShowThreadOptions !== undefined) {\r\n                setShowThreadOptions(true);\r\n              }\r\n            }}\r\n            pos=\"absolute\"\r\n            top=\"0px\"\r\n            right=\"1px\"\r\n          >\r\n            {/* <Tooltip\r\n              label=\"thread oprtions\"\r\n              aria-label=\"thread oprtions tooltip\"\r\n            > */}\r\n              <div>\r\n                <BiDotsHorizontal color=\"gray\" size=\"1.3rem\" cursor=\"pointer\" />\r\n              </div>\r\n            {/* </Tooltip> */}\r\n          </Box>\r\n        </OptionsPopover>\r\n      )}\r\n      {username && (\r\n        <>\r\n          <InteractionsSection repliesCount={repliesCount!} />\r\n          <Heading pos=\"absolute\" right=\"20px\" color=\"gray.400\" fontSize={[\"8px\", \"8px\", \"10px\",\"12px\"]}>\r\n            {createdAt !== null && createdAt?.substr(0, 10)}\r\n          </Heading>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\reportWebVitals.ts",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Topics.tsx",["120","121","122","123","124","125","126","127","128","129"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\generated\\graphql.tsx",[],["130","131"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\QuestionForm.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\OptionsPopover.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Profile.tsx",["132","133","134"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\App.tsx",["135","136","137"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setAccessToken } from \"./accessToken\";\n\nimport { Header2 } from \"./components/Header2\";\nimport { Footer } from \"./components/Footer\";\nimport { Skeleton } from \"./smallComps/Skeleton\";\n\nimport { useIsUserLoggedInQuery } from \"./generated/graphql\";\nimport { BaseRouter } from \"./routes\";\nimport { Container, Spinner } from \"@chakra-ui/react\";\n\nimport {FastBigSpinner} from \"./smallComps/Spinners\"\n\nfunction App() {\n  const [appLoading, setAppLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/refresh_token\", {\n      credentials: \"include\",\n      method: \"POST\",\n    }).then(async (x) => {\n      const resposne = await x.json();\n      setAccessToken(resposne.accessToken);\n      setAppLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {appLoading ? (\n        <Container marginLeft=\"auto\" marginRight=\"auto\" marginTop=\"10rem\">\n          <FastBigSpinner />\n        </Container>\n      ) : (\n        <>\n          <BrowserRouter>\n            {/* <Header /> */}\n            <Header2 />\n            <Skeleton>\n              <BaseRouter />\n            </Skeleton>\n            <Footer />\n          </BrowserRouter>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",["138","139"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\index.tsx",["140","141"],"import \"./index.css\";\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport {theme} from \"./theme\"\n\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  gql,\n  createHttpLink,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\n\n// import { onError } from '@apollo/client/link/error';\n\n// const authMiddlewareLink = new ApolloLink((operation, forward) => {\n//   const accessToken = getAccessToken()\n//   operation.setContext({\n//     headers: {\n//       authorization: `Bearer ${accessToken}`,\n//     },\n//   })\n//   return forward(operation);\n// });\n\nconst cache = new InMemoryCache();\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:8000/graphql\",\n  credentials: \"include\",\n});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: `Bearer ${accessToken}`,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst tokenRefreshLink = new TokenRefreshLink({\n  accessTokenField: \"accessToken\",\n  isTokenValidOrUndefined: () => {\n    const token = getAccessToken();\n    if (!token) {\n      return true;\n    }\n    try {\n      const tokenDecoded: any = jwtDecode(token);\n      const expDate: number = tokenDecoded.exp;\n      if (Date.now() >= expDate * 1000) {\n        return false;\n      } else {\n        return true;\n      }\n    } catch {\n      return false;\n    }\n  },\n  fetchAccessToken: () => {\n    return fetch(\"http://localhost:8000/refresh_token\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n  },\n  handleFetch: (accessToken) => {\n    setAccessToken(accessToken);\n  },\n  handleError: (err) => {\n    console.warn(\"Your refresh token is invalid. Try to relogin\");\n    console.error(err);\n  },\n});\n\nexport const client = new ApolloClient({\n  cache,\n\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        graphQLErrors.map(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      }\n\n      if (networkError) {\n        console.log(`[Network error]: ${networkError}`);\n      }\n    }),\n    tokenRefreshLink,\n    requestLink,\n    httpLink,\n  ]),\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\theme.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Header2.tsx",["142","143","144","145","146","147","148","149","150","151"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Skeleton.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\routes.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Footer.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\Spinners.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Modal.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\LinkBox.tsx",["152","153","154"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Register.tsx",["155"],"import React, { useState } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\n\r\nexport const Register: React.FC<RouteComponentProps> = ({}) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [register] = useRegisterMutation();\r\n\r\n  const registerNewUser = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    \r\n    if (!username || !email || !password) {\r\n      return console.log(\"enter some data\");\r\n    }\r\n    register({\r\n      variables: {\r\n        username,\r\n        email,\r\n        password,\r\n      },\r\n    }).then((response) => {\r\n      console.log(response);\r\n    });\r\n    setEmail(\"\");\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"signup-form\">\r\n        <label htmlFor=\"username\">username: </label>\r\n        <input\r\n          id=\"username\"\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <label htmlFor=\"password\">password: </label>\r\n        <input\r\n          id=\"password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <label htmlFor=\"email\">email: </label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <button onClick={(e) => registerNewUser(e)}>Register</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Home.tsx",["156","157"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Test.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\pages\\Login.tsx",["158","159","160","161","162","163","164","165","166","167","168","169","170"],"import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\"\r\nimport { setAccessToken } from '../accessToken'\r\nimport { Message } from '../components/Message'\r\nimport { IsUserLoggedInDocument, IsUserLoggedInQuery, MeDocument, MeQuery, useIsUserLoggedInQuery, useLoginMutation } from '../generated/graphql'\r\nimport { ApolloError } from \"@apollo/client/errors\"\r\n\r\n\r\nexport const Login: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [showMessage, setShowMessage] = useState({\r\n        show: false,\r\n        value: \"\"\r\n    })\r\n    const [login, { data, client }] = useLoginMutation()\r\n\r\n    const loginUser = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        e.preventDefault()\r\n        try {\r\n\r\n            const response = await login({\r\n                variables: {\r\n                    username,\r\n                    password\r\n                },\r\n                update: (cache, { data }) => {\r\n                    if (!data) {\r\n                        return null;\r\n                    }\r\n                    // cache.writeQuery<MeQuery>({\r\n                    //     query: MeDocument,\r\n                    //     data: {\r\n                    //         me: data.loginUser?.user\r\n                    //     }\r\n                    // })\r\n                    // cache.writeQuery<IsUserLoggedInQuery>({\r\n                    //     query: IsUserLoggedInDocument,\r\n                    //     data: {\r\n                    //         isUserLoggedIn: true\r\n                    //     }\r\n                    // })\r\n\r\n                },\r\n            })\r\n            if (response && response.data) {\r\n                setAccessToken(response.data.loginUser?.accessToken!)\r\n                history.push(\"/\")\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n            }\r\n        } catch (error) {\r\n            setShowMessage({ show: true, value: error.message })\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"login-form\">\r\n                {showMessage.show && (\r\n                    <Message message={showMessage.value} />\r\n                )}\r\n                <label htmlFor=\"username\">username: </label>\r\n                <input id=\"username\" type=\"text\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                <label htmlFor=\"password\">password: </label>\r\n                <input id=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                <button onClick={e => loginUser(e)}>Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\LoginFrom.tsx",["171","172","173","174","175"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  VStack,\r\n  Button,\r\n  Center,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  IsUserLoggedInDocument,\r\n  IsUserLoggedInQuery,\r\n  useLoginMutation,\r\n} from \"../generated/graphql\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setAccessToken } from \"../accessToken\";\r\n\r\nexport const LoginFrom = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showMessage, setShowMessage] = useState({\r\n    show: false,\r\n    value: \"\",\r\n  });\r\n\r\n  const [login] = useLoginMutation();\r\n\r\n  const history = useHistory();\r\n  const submitLoginForm = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    console.log(\"submit form\");\r\n    try {\r\n      const response = await login({\r\n        variables: {\r\n          username,\r\n          password,\r\n        },\r\n        update: (cache, { data }) => {\r\n          if (!data) {\r\n            return null;\r\n          }\r\n          // cache.writeQuery<MeQuery>({\r\n          //     query: MeDocument,\r\n          //     data: {\r\n          //         me: data.loginUser?.user\r\n          //     }\r\n          // })\r\n          cache.writeQuery<IsUserLoggedInQuery>({\r\n            query: IsUserLoggedInDocument,\r\n            data: {\r\n              isUserLoggedIn: true,\r\n            },\r\n          });\r\n        },\r\n      });\r\n      if (response && response.data) {\r\n        // console.log(response.data);\r\n\r\n        setAccessToken(response.data.loginUser?.accessToken!);\r\n        history.push(\"/\");\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n      }\r\n    } catch (error) {\r\n      setShowMessage({ show: true, value: error.message });\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Container padding=\"0.4rem\" color=\"green.400\">\r\n      <form onSubmit={(e) => submitLoginForm(e)}>\r\n        <FormControl id=\"username\" isRequired my=\"5px\">\r\n          <FormLabel>Username</FormLabel>\r\n          <Input\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl id=\"password\" isRequired my=\"5px\">\r\n          <FormLabel>Password</FormLabel>\r\n          <Input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </FormControl>\r\n        <Center>\r\n          <Button my=\"10px\" p=\"10px\" type=\"submit\">\r\n            login\r\n          </Button>\r\n        </Center>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\Message.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\components\\ProfileModal.tsx",["176","177","178","179","180"],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\InteractionsSection.tsx",[],"F:\\stuff\\code\\SPEC\\NewSpec\\client\\src\\smallComps\\HeaderComp.tsx",[],{"ruleId":"181","severity":1,"message":"182","line":1,"column":15,"nodeType":"183","messageId":"184","endLine":1,"endColumn":22},{"ruleId":"181","severity":1,"message":"185","line":3,"column":31,"nodeType":"183","messageId":"184","endLine":3,"endColumn":38},{"ruleId":"181","severity":1,"message":"186","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":32},{"ruleId":"181","severity":1,"message":"187","line":6,"column":3,"nodeType":"183","messageId":"184","endLine":6,"endColumn":12},{"ruleId":"181","severity":1,"message":"188","line":7,"column":3,"nodeType":"183","messageId":"184","endLine":7,"endColumn":7},{"ruleId":"181","severity":1,"message":"189","line":8,"column":3,"nodeType":"183","messageId":"184","endLine":8,"endColumn":9},{"ruleId":"181","severity":1,"message":"190","line":9,"column":3,"nodeType":"183","messageId":"184","endLine":9,"endColumn":9},{"ruleId":"181","severity":1,"message":"191","line":10,"column":3,"nodeType":"183","messageId":"184","endLine":10,"endColumn":14},{"ruleId":"181","severity":1,"message":"192","line":11,"column":3,"nodeType":"183","messageId":"184","endLine":11,"endColumn":12},{"ruleId":"181","severity":1,"message":"193","line":12,"column":3,"nodeType":"183","messageId":"184","endLine":12,"endColumn":8},{"ruleId":"181","severity":1,"message":"194","line":14,"column":3,"nodeType":"183","messageId":"184","endLine":14,"endColumn":10},{"ruleId":"181","severity":1,"message":"182","line":16,"column":3,"nodeType":"183","messageId":"184","endLine":16,"endColumn":10},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"181","severity":1,"message":"199","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"182","line":2,"column":15,"nodeType":"183","messageId":"184","endLine":2,"endColumn":22},{"ruleId":"181","severity":1,"message":"200","line":2,"column":30,"nodeType":"183","messageId":"184","endLine":2,"endColumn":38},{"ruleId":"181","severity":1,"message":"201","line":1,"column":38,"nodeType":"183","messageId":"184","endLine":1,"endColumn":44},{"ruleId":"181","severity":1,"message":"186","line":9,"column":10,"nodeType":"183","messageId":"184","endLine":9,"endColumn":32},{"ruleId":"181","severity":1,"message":"194","line":11,"column":21,"nodeType":"183","messageId":"184","endLine":11,"endColumn":28},{"ruleId":"195","replacedBy":"202"},{"ruleId":"197","replacedBy":"203"},{"ruleId":"181","severity":1,"message":"204","line":14,"column":3,"nodeType":"183","messageId":"184","endLine":14,"endColumn":6},{"ruleId":"181","severity":1,"message":"205","line":15,"column":3,"nodeType":"183","messageId":"184","endLine":15,"endColumn":17},{"ruleId":"181","severity":1,"message":"187","line":3,"column":3,"nodeType":"183","messageId":"184","endLine":3,"endColumn":12},{"ruleId":"181","severity":1,"message":"206","line":8,"column":3,"nodeType":"183","messageId":"184","endLine":8,"endColumn":9},{"ruleId":"181","severity":1,"message":"207","line":11,"column":10,"nodeType":"183","messageId":"184","endLine":11,"endColumn":18},{"ruleId":"181","severity":1,"message":"208","line":11,"column":20,"nodeType":"183","messageId":"184","endLine":11,"endColumn":27},{"ruleId":"181","severity":1,"message":"209","line":18,"column":3,"nodeType":"183","messageId":"184","endLine":18,"endColumn":13},{"ruleId":"181","severity":1,"message":"210","line":35,"column":11,"nodeType":"183","messageId":"184","endLine":35,"endColumn":17},{"ruleId":"181","severity":1,"message":"211","line":35,"column":19,"nodeType":"183","messageId":"184","endLine":35,"endColumn":25},{"ruleId":"181","severity":1,"message":"212","line":73,"column":24,"nodeType":"183","messageId":"184","endLine":73,"endColumn":30},{"ruleId":"213","severity":1,"message":"214","line":122,"column":49,"nodeType":"215","messageId":"216","endLine":122,"endColumn":52},{"ruleId":"181","severity":1,"message":"217","line":125,"column":9,"nodeType":"183","messageId":"184","endLine":125,"endColumn":20},{"ruleId":"181","severity":1,"message":"187","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"188","line":2,"column":21,"nodeType":"183","messageId":"184","endLine":2,"endColumn":25},{"ruleId":"181","severity":1,"message":"206","line":2,"column":27,"nodeType":"183","messageId":"184","endLine":2,"endColumn":33},{"ruleId":"213","severity":1,"message":"214","line":5,"column":57,"nodeType":"215","messageId":"216","endLine":5,"endColumn":59},{"ruleId":"181","severity":1,"message":"182","line":4,"column":15,"nodeType":"183","messageId":"184","endLine":4,"endColumn":22},{"ruleId":"181","severity":1,"message":"200","line":11,"column":10,"nodeType":"183","messageId":"184","endLine":11,"endColumn":18},{"ruleId":"181","severity":1,"message":"199","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"218","line":1,"column":38,"nodeType":"183","messageId":"184","endLine":1,"endColumn":45},{"ruleId":"181","severity":1,"message":"219","line":1,"column":47,"nodeType":"183","messageId":"184","endLine":1,"endColumn":58},{"ruleId":"181","severity":1,"message":"220","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":32},{"ruleId":"181","severity":1,"message":"221","line":5,"column":34,"nodeType":"183","messageId":"184","endLine":5,"endColumn":53},{"ruleId":"181","severity":1,"message":"222","line":5,"column":55,"nodeType":"183","messageId":"184","endLine":5,"endColumn":65},{"ruleId":"181","severity":1,"message":"223","line":5,"column":67,"nodeType":"183","messageId":"184","endLine":5,"endColumn":74},{"ruleId":"181","severity":1,"message":"186","line":5,"column":76,"nodeType":"183","messageId":"184","endLine":5,"endColumn":98},{"ruleId":"181","severity":1,"message":"224","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":21},{"ruleId":"181","severity":1,"message":"225","line":12,"column":12,"nodeType":"183","messageId":"184","endLine":12,"endColumn":17},{"ruleId":"181","severity":1,"message":"226","line":12,"column":19,"nodeType":"183","messageId":"184","endLine":12,"endColumn":27},{"ruleId":"181","severity":1,"message":"227","line":18,"column":21,"nodeType":"183","messageId":"184","endLine":18,"endColumn":25},{"ruleId":"181","severity":1,"message":"212","line":18,"column":27,"nodeType":"183","messageId":"184","endLine":18,"endColumn":33},{"ruleId":"181","severity":1,"message":"199","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"189","line":6,"column":3,"nodeType":"183","messageId":"184","endLine":6,"endColumn":9},{"ruleId":"181","severity":1,"message":"225","line":21,"column":10,"nodeType":"183","messageId":"184","endLine":21,"endColumn":15},{"ruleId":"181","severity":1,"message":"226","line":21,"column":17,"nodeType":"183","messageId":"184","endLine":21,"endColumn":25},{"ruleId":"181","severity":1,"message":"228","line":23,"column":10,"nodeType":"183","messageId":"184","endLine":23,"endColumn":21},{"ruleId":"181","severity":1,"message":"190","line":3,"column":3,"nodeType":"183","messageId":"184","endLine":3,"endColumn":9},{"ruleId":"181","severity":1,"message":"229","line":9,"column":3,"nodeType":"183","messageId":"184","endLine":9,"endColumn":14},{"ruleId":"181","severity":1,"message":"230","line":10,"column":3,"nodeType":"183","messageId":"184","endLine":10,"endColumn":14},{"ruleId":"181","severity":1,"message":"231","line":11,"column":3,"nodeType":"183","messageId":"184","endLine":11,"endColumn":16},{"ruleId":"181","severity":1,"message":"232","line":12,"column":3,"nodeType":"183","messageId":"184","endLine":12,"endColumn":10},"@typescript-eslint/no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","'useIsUserLoggedInQuery' is defined but never used.","'Container' is defined but never used.","'Flex' is defined but never used.","'VStack' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'Spinner' is defined but never used.","no-native-reassign",["233"],"no-negated-in-lhs",["234"],"'useEffect' is defined but never used.","'Skeleton' is defined but never used.","'useRef' is defined but never used.",["233"],["234"],"'gql' is defined but never used.","'createHttpLink' is defined but never used.","'Center' is defined but never used.","'MoonIcon' is defined but never used.","'SunIcon' is defined but never used.","'useMeQuery' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'client' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'currentMode' is assigned a value but never used.","'useMemo' is defined but never used.","'useCallback' is defined but never used.","'IsUserLoggedInDocument' is defined but never used.","'IsUserLoggedInQuery' is defined but never used.","'MeDocument' is defined but never used.","'MeQuery' is defined but never used.","'ApolloError' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'data' is assigned a value but never used.","'showMessage' is assigned a value but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'useDisclosure' is defined but never used.","'Heading' is defined but never used.","no-global-assign","no-unsafe-negation"]